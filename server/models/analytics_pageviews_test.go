// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAnalyticsPageviews(t *testing.T) {
	t.Parallel()

	query := AnalyticsPageviews()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAnalyticsPageviewsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageview{}
	if err = randomize.Struct(seed, o, analyticsPageviewDBTypes, true, analyticsPageviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AnalyticsPageviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnalyticsPageviewsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageview{}
	if err = randomize.Struct(seed, o, analyticsPageviewDBTypes, true, analyticsPageviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AnalyticsPageviews().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AnalyticsPageviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnalyticsPageviewsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageview{}
	if err = randomize.Struct(seed, o, analyticsPageviewDBTypes, true, analyticsPageviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AnalyticsPageviewSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AnalyticsPageviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnalyticsPageviewsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageview{}
	if err = randomize.Struct(seed, o, analyticsPageviewDBTypes, true, analyticsPageviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AnalyticsPageviewExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AnalyticsPageview exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AnalyticsPageviewExists to return true, but got false.")
	}
}

func testAnalyticsPageviewsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageview{}
	if err = randomize.Struct(seed, o, analyticsPageviewDBTypes, true, analyticsPageviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	analyticsPageviewFound, err := FindAnalyticsPageview(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if analyticsPageviewFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAnalyticsPageviewsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageview{}
	if err = randomize.Struct(seed, o, analyticsPageviewDBTypes, true, analyticsPageviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AnalyticsPageviews().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAnalyticsPageviewsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageview{}
	if err = randomize.Struct(seed, o, analyticsPageviewDBTypes, true, analyticsPageviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AnalyticsPageviews().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAnalyticsPageviewsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	analyticsPageviewOne := &AnalyticsPageview{}
	analyticsPageviewTwo := &AnalyticsPageview{}
	if err = randomize.Struct(seed, analyticsPageviewOne, analyticsPageviewDBTypes, false, analyticsPageviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageview struct: %s", err)
	}
	if err = randomize.Struct(seed, analyticsPageviewTwo, analyticsPageviewDBTypes, false, analyticsPageviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = analyticsPageviewOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = analyticsPageviewTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AnalyticsPageviews().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAnalyticsPageviewsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	analyticsPageviewOne := &AnalyticsPageview{}
	analyticsPageviewTwo := &AnalyticsPageview{}
	if err = randomize.Struct(seed, analyticsPageviewOne, analyticsPageviewDBTypes, false, analyticsPageviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageview struct: %s", err)
	}
	if err = randomize.Struct(seed, analyticsPageviewTwo, analyticsPageviewDBTypes, false, analyticsPageviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = analyticsPageviewOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = analyticsPageviewTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnalyticsPageviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func analyticsPageviewBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageview) error {
	*o = AnalyticsPageview{}
	return nil
}

func analyticsPageviewAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageview) error {
	*o = AnalyticsPageview{}
	return nil
}

func analyticsPageviewAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageview) error {
	*o = AnalyticsPageview{}
	return nil
}

func analyticsPageviewBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageview) error {
	*o = AnalyticsPageview{}
	return nil
}

func analyticsPageviewAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageview) error {
	*o = AnalyticsPageview{}
	return nil
}

func analyticsPageviewBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageview) error {
	*o = AnalyticsPageview{}
	return nil
}

func analyticsPageviewAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageview) error {
	*o = AnalyticsPageview{}
	return nil
}

func analyticsPageviewBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageview) error {
	*o = AnalyticsPageview{}
	return nil
}

func analyticsPageviewAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageview) error {
	*o = AnalyticsPageview{}
	return nil
}

func testAnalyticsPageviewsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AnalyticsPageview{}
	o := &AnalyticsPageview{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, analyticsPageviewDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageview object: %s", err)
	}

	AddAnalyticsPageviewHook(boil.BeforeInsertHook, analyticsPageviewBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewBeforeInsertHooks = []AnalyticsPageviewHook{}

	AddAnalyticsPageviewHook(boil.AfterInsertHook, analyticsPageviewAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewAfterInsertHooks = []AnalyticsPageviewHook{}

	AddAnalyticsPageviewHook(boil.AfterSelectHook, analyticsPageviewAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewAfterSelectHooks = []AnalyticsPageviewHook{}

	AddAnalyticsPageviewHook(boil.BeforeUpdateHook, analyticsPageviewBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewBeforeUpdateHooks = []AnalyticsPageviewHook{}

	AddAnalyticsPageviewHook(boil.AfterUpdateHook, analyticsPageviewAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewAfterUpdateHooks = []AnalyticsPageviewHook{}

	AddAnalyticsPageviewHook(boil.BeforeDeleteHook, analyticsPageviewBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewBeforeDeleteHooks = []AnalyticsPageviewHook{}

	AddAnalyticsPageviewHook(boil.AfterDeleteHook, analyticsPageviewAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewAfterDeleteHooks = []AnalyticsPageviewHook{}

	AddAnalyticsPageviewHook(boil.BeforeUpsertHook, analyticsPageviewBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewBeforeUpsertHooks = []AnalyticsPageviewHook{}

	AddAnalyticsPageviewHook(boil.AfterUpsertHook, analyticsPageviewAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewAfterUpsertHooks = []AnalyticsPageviewHook{}
}

func testAnalyticsPageviewsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageview{}
	if err = randomize.Struct(seed, o, analyticsPageviewDBTypes, true, analyticsPageviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnalyticsPageviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAnalyticsPageviewsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageview{}
	if err = randomize.Struct(seed, o, analyticsPageviewDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(analyticsPageviewColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AnalyticsPageviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAnalyticsPageviewToManyPageviewAnalyticsPageviewReferers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AnalyticsPageview
	var b, c AnalyticsPageviewReferer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, analyticsPageviewDBTypes, true, analyticsPageviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageview struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, analyticsPageviewRefererDBTypes, false, analyticsPageviewRefererColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, analyticsPageviewRefererDBTypes, false, analyticsPageviewRefererColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PageviewID = a.ID
	c.PageviewID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	analyticsPageviewReferer, err := a.PageviewAnalyticsPageviewReferers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range analyticsPageviewReferer {
		if v.PageviewID == b.PageviewID {
			bFound = true
		}
		if v.PageviewID == c.PageviewID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AnalyticsPageviewSlice{&a}
	if err = a.L.LoadPageviewAnalyticsPageviewReferers(ctx, tx, false, (*[]*AnalyticsPageview)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PageviewAnalyticsPageviewReferers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PageviewAnalyticsPageviewReferers = nil
	if err = a.L.LoadPageviewAnalyticsPageviewReferers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PageviewAnalyticsPageviewReferers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", analyticsPageviewReferer)
	}
}

func testAnalyticsPageviewToManyPageviewAnalyticsPageviewUseragents(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AnalyticsPageview
	var b, c AnalyticsPageviewUseragent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, analyticsPageviewDBTypes, true, analyticsPageviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageview struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, analyticsPageviewUseragentDBTypes, false, analyticsPageviewUseragentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, analyticsPageviewUseragentDBTypes, false, analyticsPageviewUseragentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PageviewID = a.ID
	c.PageviewID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	analyticsPageviewUseragent, err := a.PageviewAnalyticsPageviewUseragents().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range analyticsPageviewUseragent {
		if v.PageviewID == b.PageviewID {
			bFound = true
		}
		if v.PageviewID == c.PageviewID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AnalyticsPageviewSlice{&a}
	if err = a.L.LoadPageviewAnalyticsPageviewUseragents(ctx, tx, false, (*[]*AnalyticsPageview)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PageviewAnalyticsPageviewUseragents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PageviewAnalyticsPageviewUseragents = nil
	if err = a.L.LoadPageviewAnalyticsPageviewUseragents(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PageviewAnalyticsPageviewUseragents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", analyticsPageviewUseragent)
	}
}

func testAnalyticsPageviewToManyAddOpPageviewAnalyticsPageviewReferers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AnalyticsPageview
	var b, c, d, e AnalyticsPageviewReferer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, analyticsPageviewDBTypes, false, strmangle.SetComplement(analyticsPageviewPrimaryKeyColumns, analyticsPageviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AnalyticsPageviewReferer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, analyticsPageviewRefererDBTypes, false, strmangle.SetComplement(analyticsPageviewRefererPrimaryKeyColumns, analyticsPageviewRefererColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AnalyticsPageviewReferer{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPageviewAnalyticsPageviewReferers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PageviewID {
			t.Error("foreign key was wrong value", a.ID, first.PageviewID)
		}
		if a.ID != second.PageviewID {
			t.Error("foreign key was wrong value", a.ID, second.PageviewID)
		}

		if first.R.Pageview != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Pageview != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PageviewAnalyticsPageviewReferers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PageviewAnalyticsPageviewReferers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PageviewAnalyticsPageviewReferers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testAnalyticsPageviewToManyAddOpPageviewAnalyticsPageviewUseragents(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AnalyticsPageview
	var b, c, d, e AnalyticsPageviewUseragent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, analyticsPageviewDBTypes, false, strmangle.SetComplement(analyticsPageviewPrimaryKeyColumns, analyticsPageviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AnalyticsPageviewUseragent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, analyticsPageviewUseragentDBTypes, false, strmangle.SetComplement(analyticsPageviewUseragentPrimaryKeyColumns, analyticsPageviewUseragentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AnalyticsPageviewUseragent{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPageviewAnalyticsPageviewUseragents(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PageviewID {
			t.Error("foreign key was wrong value", a.ID, first.PageviewID)
		}
		if a.ID != second.PageviewID {
			t.Error("foreign key was wrong value", a.ID, second.PageviewID)
		}

		if first.R.Pageview != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Pageview != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PageviewAnalyticsPageviewUseragents[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PageviewAnalyticsPageviewUseragents[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PageviewAnalyticsPageviewUseragents().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAnalyticsPageviewsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageview{}
	if err = randomize.Struct(seed, o, analyticsPageviewDBTypes, true, analyticsPageviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAnalyticsPageviewsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageview{}
	if err = randomize.Struct(seed, o, analyticsPageviewDBTypes, true, analyticsPageviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AnalyticsPageviewSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAnalyticsPageviewsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageview{}
	if err = randomize.Struct(seed, o, analyticsPageviewDBTypes, true, analyticsPageviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AnalyticsPageviews().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	analyticsPageviewDBTypes = map[string]string{`Host`: `varchar`, `ID`: `bigint`, `InitialRid`: `varchar`, `IsNew`: `tinyint`, `Method`: `varchar`, `Path`: `varchar`, `Query`: `varchar`, `RemoteAddress`: `varchar`, `Status`: `int`, `UserAgent`: `text`, `ViewedAt`: `timestamp`}
	_                        = bytes.MinRead
)

func testAnalyticsPageviewsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(analyticsPageviewPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(analyticsPageviewColumns) == len(analyticsPageviewPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageview{}
	if err = randomize.Struct(seed, o, analyticsPageviewDBTypes, true, analyticsPageviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnalyticsPageviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, analyticsPageviewDBTypes, true, analyticsPageviewPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageview struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAnalyticsPageviewsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(analyticsPageviewColumns) == len(analyticsPageviewPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageview{}
	if err = randomize.Struct(seed, o, analyticsPageviewDBTypes, true, analyticsPageviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnalyticsPageviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, analyticsPageviewDBTypes, true, analyticsPageviewPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageview struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(analyticsPageviewColumns, analyticsPageviewPrimaryKeyColumns) {
		fields = analyticsPageviewColumns
	} else {
		fields = strmangle.SetComplement(
			analyticsPageviewColumns,
			analyticsPageviewPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AnalyticsPageviewSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAnalyticsPageviewsUpsert(t *testing.T) {
	t.Parallel()

	if len(analyticsPageviewColumns) == len(analyticsPageviewPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLAnalyticsPageviewUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AnalyticsPageview{}
	if err = randomize.Struct(seed, &o, analyticsPageviewDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AnalyticsPageview: %s", err)
	}

	count, err := AnalyticsPageviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, analyticsPageviewDBTypes, false, analyticsPageviewPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageview struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AnalyticsPageview: %s", err)
	}

	count, err = AnalyticsPageviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
