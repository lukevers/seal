// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// AnalyticsPageview is an object representing the database table.
type AnalyticsPageview struct {
	ID            uint64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Host          string      `boil:"host" json:"host" toml:"host" yaml:"host"`
	Path          string      `boil:"path" json:"path" toml:"path" yaml:"path"`
	Method        string      `boil:"method" json:"method" toml:"method" yaml:"method"`
	Query         string      `boil:"query" json:"query" toml:"query" yaml:"query"`
	RemoteAddress string      `boil:"remote_address" json:"remote_address" toml:"remote_address" yaml:"remote_address"`
	UserAgent     null.String `boil:"user_agent" json:"user_agent,omitempty" toml:"user_agent" yaml:"user_agent,omitempty"`
	Status        int         `boil:"status" json:"status" toml:"status" yaml:"status"`
	IsNew         bool        `boil:"is_new" json:"is_new" toml:"is_new" yaml:"is_new"`
	InitialRid    string      `boil:"initial_rid" json:"initial_rid" toml:"initial_rid" yaml:"initial_rid"`
	ViewedAt      time.Time   `boil:"viewed_at" json:"viewed_at" toml:"viewed_at" yaml:"viewed_at"`

	R *analyticsPageviewR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L analyticsPageviewL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AnalyticsPageviewColumns = struct {
	ID            string
	Host          string
	Path          string
	Method        string
	Query         string
	RemoteAddress string
	UserAgent     string
	Status        string
	IsNew         string
	InitialRid    string
	ViewedAt      string
}{
	ID:            "id",
	Host:          "host",
	Path:          "path",
	Method:        "method",
	Query:         "query",
	RemoteAddress: "remote_address",
	UserAgent:     "user_agent",
	Status:        "status",
	IsNew:         "is_new",
	InitialRid:    "initial_rid",
	ViewedAt:      "viewed_at",
}

// AnalyticsPageviewRels is where relationship names are stored.
var AnalyticsPageviewRels = struct {
	PageviewAnalyticsPageviewReferers   string
	PageviewAnalyticsPageviewUseragents string
}{
	PageviewAnalyticsPageviewReferers:   "PageviewAnalyticsPageviewReferers",
	PageviewAnalyticsPageviewUseragents: "PageviewAnalyticsPageviewUseragents",
}

// analyticsPageviewR is where relationships are stored.
type analyticsPageviewR struct {
	PageviewAnalyticsPageviewReferers   AnalyticsPageviewRefererSlice
	PageviewAnalyticsPageviewUseragents AnalyticsPageviewUseragentSlice
}

// NewStruct creates a new relationship struct
func (*analyticsPageviewR) NewStruct() *analyticsPageviewR {
	return &analyticsPageviewR{}
}

// analyticsPageviewL is where Load methods for each relationship are stored.
type analyticsPageviewL struct{}

var (
	analyticsPageviewColumns               = []string{"id", "host", "path", "method", "query", "remote_address", "user_agent", "status", "is_new", "initial_rid", "viewed_at"}
	analyticsPageviewColumnsWithoutDefault = []string{"host", "path", "method", "query", "remote_address", "user_agent", "status", "is_new", "initial_rid"}
	analyticsPageviewColumnsWithDefault    = []string{"id", "viewed_at"}
	analyticsPageviewPrimaryKeyColumns     = []string{"id"}
)

type (
	// AnalyticsPageviewSlice is an alias for a slice of pointers to AnalyticsPageview.
	// This should generally be used opposed to []AnalyticsPageview.
	AnalyticsPageviewSlice []*AnalyticsPageview
	// AnalyticsPageviewHook is the signature for custom AnalyticsPageview hook methods
	AnalyticsPageviewHook func(context.Context, boil.ContextExecutor, *AnalyticsPageview) error

	analyticsPageviewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	analyticsPageviewType                 = reflect.TypeOf(&AnalyticsPageview{})
	analyticsPageviewMapping              = queries.MakeStructMapping(analyticsPageviewType)
	analyticsPageviewPrimaryKeyMapping, _ = queries.BindMapping(analyticsPageviewType, analyticsPageviewMapping, analyticsPageviewPrimaryKeyColumns)
	analyticsPageviewInsertCacheMut       sync.RWMutex
	analyticsPageviewInsertCache          = make(map[string]insertCache)
	analyticsPageviewUpdateCacheMut       sync.RWMutex
	analyticsPageviewUpdateCache          = make(map[string]updateCache)
	analyticsPageviewUpsertCacheMut       sync.RWMutex
	analyticsPageviewUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var analyticsPageviewBeforeInsertHooks []AnalyticsPageviewHook
var analyticsPageviewBeforeUpdateHooks []AnalyticsPageviewHook
var analyticsPageviewBeforeDeleteHooks []AnalyticsPageviewHook
var analyticsPageviewBeforeUpsertHooks []AnalyticsPageviewHook

var analyticsPageviewAfterInsertHooks []AnalyticsPageviewHook
var analyticsPageviewAfterSelectHooks []AnalyticsPageviewHook
var analyticsPageviewAfterUpdateHooks []AnalyticsPageviewHook
var analyticsPageviewAfterDeleteHooks []AnalyticsPageviewHook
var analyticsPageviewAfterUpsertHooks []AnalyticsPageviewHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AnalyticsPageview) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range analyticsPageviewBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AnalyticsPageview) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range analyticsPageviewBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AnalyticsPageview) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range analyticsPageviewBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AnalyticsPageview) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range analyticsPageviewBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AnalyticsPageview) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range analyticsPageviewAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AnalyticsPageview) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range analyticsPageviewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AnalyticsPageview) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range analyticsPageviewAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AnalyticsPageview) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range analyticsPageviewAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AnalyticsPageview) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range analyticsPageviewAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAnalyticsPageviewHook registers your hook function for all future operations.
func AddAnalyticsPageviewHook(hookPoint boil.HookPoint, analyticsPageviewHook AnalyticsPageviewHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		analyticsPageviewBeforeInsertHooks = append(analyticsPageviewBeforeInsertHooks, analyticsPageviewHook)
	case boil.BeforeUpdateHook:
		analyticsPageviewBeforeUpdateHooks = append(analyticsPageviewBeforeUpdateHooks, analyticsPageviewHook)
	case boil.BeforeDeleteHook:
		analyticsPageviewBeforeDeleteHooks = append(analyticsPageviewBeforeDeleteHooks, analyticsPageviewHook)
	case boil.BeforeUpsertHook:
		analyticsPageviewBeforeUpsertHooks = append(analyticsPageviewBeforeUpsertHooks, analyticsPageviewHook)
	case boil.AfterInsertHook:
		analyticsPageviewAfterInsertHooks = append(analyticsPageviewAfterInsertHooks, analyticsPageviewHook)
	case boil.AfterSelectHook:
		analyticsPageviewAfterSelectHooks = append(analyticsPageviewAfterSelectHooks, analyticsPageviewHook)
	case boil.AfterUpdateHook:
		analyticsPageviewAfterUpdateHooks = append(analyticsPageviewAfterUpdateHooks, analyticsPageviewHook)
	case boil.AfterDeleteHook:
		analyticsPageviewAfterDeleteHooks = append(analyticsPageviewAfterDeleteHooks, analyticsPageviewHook)
	case boil.AfterUpsertHook:
		analyticsPageviewAfterUpsertHooks = append(analyticsPageviewAfterUpsertHooks, analyticsPageviewHook)
	}
}

// One returns a single analyticsPageview record from the query.
func (q analyticsPageviewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AnalyticsPageview, error) {
	o := &AnalyticsPageview{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for analytics_pageviews")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AnalyticsPageview records from the query.
func (q analyticsPageviewQuery) All(ctx context.Context, exec boil.ContextExecutor) (AnalyticsPageviewSlice, error) {
	var o []*AnalyticsPageview

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AnalyticsPageview slice")
	}

	if len(analyticsPageviewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AnalyticsPageview records in the query.
func (q analyticsPageviewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count analytics_pageviews rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q analyticsPageviewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if analytics_pageviews exists")
	}

	return count > 0, nil
}

// PageviewAnalyticsPageviewReferers retrieves all the analytics_pageview_referer's AnalyticsPageviewReferers with an executor via pageview_id column.
func (o *AnalyticsPageview) PageviewAnalyticsPageviewReferers(mods ...qm.QueryMod) analyticsPageviewRefererQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`analytics_pageview_referers`.`pageview_id`=?", o.ID),
	)

	query := AnalyticsPageviewReferers(queryMods...)
	queries.SetFrom(query.Query, "`analytics_pageview_referers`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`analytics_pageview_referers`.*"})
	}

	return query
}

// PageviewAnalyticsPageviewUseragents retrieves all the analytics_pageview_useragent's AnalyticsPageviewUseragents with an executor via pageview_id column.
func (o *AnalyticsPageview) PageviewAnalyticsPageviewUseragents(mods ...qm.QueryMod) analyticsPageviewUseragentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`analytics_pageview_useragents`.`pageview_id`=?", o.ID),
	)

	query := AnalyticsPageviewUseragents(queryMods...)
	queries.SetFrom(query.Query, "`analytics_pageview_useragents`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`analytics_pageview_useragents`.*"})
	}

	return query
}

// LoadPageviewAnalyticsPageviewReferers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (analyticsPageviewL) LoadPageviewAnalyticsPageviewReferers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAnalyticsPageview interface{}, mods queries.Applicator) error {
	var slice []*AnalyticsPageview
	var object *AnalyticsPageview

	if singular {
		object = maybeAnalyticsPageview.(*AnalyticsPageview)
	} else {
		slice = *maybeAnalyticsPageview.(*[]*AnalyticsPageview)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &analyticsPageviewR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &analyticsPageviewR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`analytics_pageview_referers`), qm.WhereIn(`pageview_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load analytics_pageview_referers")
	}

	var resultSlice []*AnalyticsPageviewReferer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice analytics_pageview_referers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on analytics_pageview_referers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for analytics_pageview_referers")
	}

	if len(analyticsPageviewRefererAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PageviewAnalyticsPageviewReferers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &analyticsPageviewRefererR{}
			}
			foreign.R.Pageview = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PageviewID {
				local.R.PageviewAnalyticsPageviewReferers = append(local.R.PageviewAnalyticsPageviewReferers, foreign)
				if foreign.R == nil {
					foreign.R = &analyticsPageviewRefererR{}
				}
				foreign.R.Pageview = local
				break
			}
		}
	}

	return nil
}

// LoadPageviewAnalyticsPageviewUseragents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (analyticsPageviewL) LoadPageviewAnalyticsPageviewUseragents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAnalyticsPageview interface{}, mods queries.Applicator) error {
	var slice []*AnalyticsPageview
	var object *AnalyticsPageview

	if singular {
		object = maybeAnalyticsPageview.(*AnalyticsPageview)
	} else {
		slice = *maybeAnalyticsPageview.(*[]*AnalyticsPageview)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &analyticsPageviewR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &analyticsPageviewR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`analytics_pageview_useragents`), qm.WhereIn(`pageview_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load analytics_pageview_useragents")
	}

	var resultSlice []*AnalyticsPageviewUseragent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice analytics_pageview_useragents")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on analytics_pageview_useragents")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for analytics_pageview_useragents")
	}

	if len(analyticsPageviewUseragentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PageviewAnalyticsPageviewUseragents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &analyticsPageviewUseragentR{}
			}
			foreign.R.Pageview = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PageviewID {
				local.R.PageviewAnalyticsPageviewUseragents = append(local.R.PageviewAnalyticsPageviewUseragents, foreign)
				if foreign.R == nil {
					foreign.R = &analyticsPageviewUseragentR{}
				}
				foreign.R.Pageview = local
				break
			}
		}
	}

	return nil
}

// AddPageviewAnalyticsPageviewReferers adds the given related objects to the existing relationships
// of the analytics_pageview, optionally inserting them as new records.
// Appends related to o.R.PageviewAnalyticsPageviewReferers.
// Sets related.R.Pageview appropriately.
func (o *AnalyticsPageview) AddPageviewAnalyticsPageviewReferers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AnalyticsPageviewReferer) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PageviewID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `analytics_pageview_referers` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"pageview_id"}),
				strmangle.WhereClause("`", "`", 0, analyticsPageviewRefererPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PageviewID = o.ID
		}
	}

	if o.R == nil {
		o.R = &analyticsPageviewR{
			PageviewAnalyticsPageviewReferers: related,
		}
	} else {
		o.R.PageviewAnalyticsPageviewReferers = append(o.R.PageviewAnalyticsPageviewReferers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &analyticsPageviewRefererR{
				Pageview: o,
			}
		} else {
			rel.R.Pageview = o
		}
	}
	return nil
}

// AddPageviewAnalyticsPageviewUseragents adds the given related objects to the existing relationships
// of the analytics_pageview, optionally inserting them as new records.
// Appends related to o.R.PageviewAnalyticsPageviewUseragents.
// Sets related.R.Pageview appropriately.
func (o *AnalyticsPageview) AddPageviewAnalyticsPageviewUseragents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AnalyticsPageviewUseragent) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PageviewID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `analytics_pageview_useragents` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"pageview_id"}),
				strmangle.WhereClause("`", "`", 0, analyticsPageviewUseragentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PageviewID = o.ID
		}
	}

	if o.R == nil {
		o.R = &analyticsPageviewR{
			PageviewAnalyticsPageviewUseragents: related,
		}
	} else {
		o.R.PageviewAnalyticsPageviewUseragents = append(o.R.PageviewAnalyticsPageviewUseragents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &analyticsPageviewUseragentR{
				Pageview: o,
			}
		} else {
			rel.R.Pageview = o
		}
	}
	return nil
}

// AnalyticsPageviews retrieves all the records using an executor.
func AnalyticsPageviews(mods ...qm.QueryMod) analyticsPageviewQuery {
	mods = append(mods, qm.From("`analytics_pageviews`"))
	return analyticsPageviewQuery{NewQuery(mods...)}
}

// FindAnalyticsPageview retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAnalyticsPageview(ctx context.Context, exec boil.ContextExecutor, iD uint64, selectCols ...string) (*AnalyticsPageview, error) {
	analyticsPageviewObj := &AnalyticsPageview{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `analytics_pageviews` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, analyticsPageviewObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from analytics_pageviews")
	}

	return analyticsPageviewObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AnalyticsPageview) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no analytics_pageviews provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(analyticsPageviewColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	analyticsPageviewInsertCacheMut.RLock()
	cache, cached := analyticsPageviewInsertCache[key]
	analyticsPageviewInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			analyticsPageviewColumns,
			analyticsPageviewColumnsWithDefault,
			analyticsPageviewColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(analyticsPageviewType, analyticsPageviewMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(analyticsPageviewType, analyticsPageviewMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `analytics_pageviews` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `analytics_pageviews` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `analytics_pageviews` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, analyticsPageviewPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into analytics_pageviews")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == analyticsPageviewMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for analytics_pageviews")
	}

CacheNoHooks:
	if !cached {
		analyticsPageviewInsertCacheMut.Lock()
		analyticsPageviewInsertCache[key] = cache
		analyticsPageviewInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AnalyticsPageview.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AnalyticsPageview) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	analyticsPageviewUpdateCacheMut.RLock()
	cache, cached := analyticsPageviewUpdateCache[key]
	analyticsPageviewUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			analyticsPageviewColumns,
			analyticsPageviewPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update analytics_pageviews, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `analytics_pageviews` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, analyticsPageviewPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(analyticsPageviewType, analyticsPageviewMapping, append(wl, analyticsPageviewPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update analytics_pageviews row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for analytics_pageviews")
	}

	if !cached {
		analyticsPageviewUpdateCacheMut.Lock()
		analyticsPageviewUpdateCache[key] = cache
		analyticsPageviewUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q analyticsPageviewQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for analytics_pageviews")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for analytics_pageviews")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AnalyticsPageviewSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), analyticsPageviewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `analytics_pageviews` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, analyticsPageviewPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in analyticsPageview slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all analyticsPageview")
	}
	return rowsAff, nil
}

var mySQLAnalyticsPageviewUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AnalyticsPageview) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no analytics_pageviews provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(analyticsPageviewColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLAnalyticsPageviewUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	analyticsPageviewUpsertCacheMut.RLock()
	cache, cached := analyticsPageviewUpsertCache[key]
	analyticsPageviewUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			analyticsPageviewColumns,
			analyticsPageviewColumnsWithDefault,
			analyticsPageviewColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			analyticsPageviewColumns,
			analyticsPageviewPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert analytics_pageviews, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "analytics_pageviews", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `analytics_pageviews` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(analyticsPageviewType, analyticsPageviewMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(analyticsPageviewType, analyticsPageviewMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for analytics_pageviews")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == analyticsPageviewMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(analyticsPageviewType, analyticsPageviewMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for analytics_pageviews")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for analytics_pageviews")
	}

CacheNoHooks:
	if !cached {
		analyticsPageviewUpsertCacheMut.Lock()
		analyticsPageviewUpsertCache[key] = cache
		analyticsPageviewUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AnalyticsPageview record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AnalyticsPageview) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AnalyticsPageview provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), analyticsPageviewPrimaryKeyMapping)
	sql := "DELETE FROM `analytics_pageviews` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from analytics_pageviews")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for analytics_pageviews")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q analyticsPageviewQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no analyticsPageviewQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from analytics_pageviews")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for analytics_pageviews")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AnalyticsPageviewSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AnalyticsPageview slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(analyticsPageviewBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), analyticsPageviewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `analytics_pageviews` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, analyticsPageviewPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from analyticsPageview slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for analytics_pageviews")
	}

	if len(analyticsPageviewAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AnalyticsPageview) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAnalyticsPageview(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AnalyticsPageviewSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AnalyticsPageviewSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), analyticsPageviewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `analytics_pageviews`.* FROM `analytics_pageviews` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, analyticsPageviewPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AnalyticsPageviewSlice")
	}

	*o = slice

	return nil
}

// AnalyticsPageviewExists checks if the AnalyticsPageview row exists.
func AnalyticsPageviewExists(ctx context.Context, exec boil.ContextExecutor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `analytics_pageviews` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if analytics_pageviews exists")
	}

	return exists, nil
}
