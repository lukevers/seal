// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Subscriber is an object representing the database table.
type Subscriber struct {
	ID        uint        `boil:"id" json:"id" toml:"id" yaml:"id"`
	Email     string      `boil:"email" json:"email" toml:"email" yaml:"email"`
	TeamID    null.Uint   `boil:"team_id" json:"team_id,omitempty" toml:"team_id" yaml:"team_id,omitempty"`
	Referrer  null.String `boil:"referrer" json:"referrer,omitempty" toml:"referrer" yaml:"referrer,omitempty"`
	CreatedAt time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *subscriberR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L subscriberL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SubscriberColumns = struct {
	ID        string
	Email     string
	TeamID    string
	Referrer  string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "id",
	Email:     "email",
	TeamID:    "team_id",
	Referrer:  "referrer",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

// SubscriberRels is where relationship names are stored.
var SubscriberRels = struct {
	Team string
}{
	Team: "Team",
}

// subscriberR is where relationships are stored.
type subscriberR struct {
	Team *Team
}

// NewStruct creates a new relationship struct
func (*subscriberR) NewStruct() *subscriberR {
	return &subscriberR{}
}

// subscriberL is where Load methods for each relationship are stored.
type subscriberL struct{}

var (
	subscriberColumns               = []string{"id", "email", "team_id", "referrer", "created_at", "updated_at", "deleted_at"}
	subscriberColumnsWithoutDefault = []string{"email", "team_id", "referrer", "deleted_at"}
	subscriberColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	subscriberPrimaryKeyColumns     = []string{"id"}
)

type (
	// SubscriberSlice is an alias for a slice of pointers to Subscriber.
	// This should generally be used opposed to []Subscriber.
	SubscriberSlice []*Subscriber
	// SubscriberHook is the signature for custom Subscriber hook methods
	SubscriberHook func(context.Context, boil.ContextExecutor, *Subscriber) error

	subscriberQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	subscriberType                 = reflect.TypeOf(&Subscriber{})
	subscriberMapping              = queries.MakeStructMapping(subscriberType)
	subscriberPrimaryKeyMapping, _ = queries.BindMapping(subscriberType, subscriberMapping, subscriberPrimaryKeyColumns)
	subscriberInsertCacheMut       sync.RWMutex
	subscriberInsertCache          = make(map[string]insertCache)
	subscriberUpdateCacheMut       sync.RWMutex
	subscriberUpdateCache          = make(map[string]updateCache)
	subscriberUpsertCacheMut       sync.RWMutex
	subscriberUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var subscriberBeforeInsertHooks []SubscriberHook
var subscriberBeforeUpdateHooks []SubscriberHook
var subscriberBeforeDeleteHooks []SubscriberHook
var subscriberBeforeUpsertHooks []SubscriberHook

var subscriberAfterInsertHooks []SubscriberHook
var subscriberAfterSelectHooks []SubscriberHook
var subscriberAfterUpdateHooks []SubscriberHook
var subscriberAfterDeleteHooks []SubscriberHook
var subscriberAfterUpsertHooks []SubscriberHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Subscriber) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range subscriberBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Subscriber) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range subscriberBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Subscriber) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range subscriberBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Subscriber) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range subscriberBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Subscriber) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range subscriberAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Subscriber) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range subscriberAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Subscriber) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range subscriberAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Subscriber) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range subscriberAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Subscriber) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range subscriberAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSubscriberHook registers your hook function for all future operations.
func AddSubscriberHook(hookPoint boil.HookPoint, subscriberHook SubscriberHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		subscriberBeforeInsertHooks = append(subscriberBeforeInsertHooks, subscriberHook)
	case boil.BeforeUpdateHook:
		subscriberBeforeUpdateHooks = append(subscriberBeforeUpdateHooks, subscriberHook)
	case boil.BeforeDeleteHook:
		subscriberBeforeDeleteHooks = append(subscriberBeforeDeleteHooks, subscriberHook)
	case boil.BeforeUpsertHook:
		subscriberBeforeUpsertHooks = append(subscriberBeforeUpsertHooks, subscriberHook)
	case boil.AfterInsertHook:
		subscriberAfterInsertHooks = append(subscriberAfterInsertHooks, subscriberHook)
	case boil.AfterSelectHook:
		subscriberAfterSelectHooks = append(subscriberAfterSelectHooks, subscriberHook)
	case boil.AfterUpdateHook:
		subscriberAfterUpdateHooks = append(subscriberAfterUpdateHooks, subscriberHook)
	case boil.AfterDeleteHook:
		subscriberAfterDeleteHooks = append(subscriberAfterDeleteHooks, subscriberHook)
	case boil.AfterUpsertHook:
		subscriberAfterUpsertHooks = append(subscriberAfterUpsertHooks, subscriberHook)
	}
}

// One returns a single subscriber record from the query.
func (q subscriberQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Subscriber, error) {
	o := &Subscriber{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for subscribers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Subscriber records from the query.
func (q subscriberQuery) All(ctx context.Context, exec boil.ContextExecutor) (SubscriberSlice, error) {
	var o []*Subscriber

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Subscriber slice")
	}

	if len(subscriberAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Subscriber records in the query.
func (q subscriberQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count subscribers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q subscriberQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if subscribers exists")
	}

	return count > 0, nil
}

// Team pointed to by the foreign key.
func (o *Subscriber) Team(mods ...qm.QueryMod) teamQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.TeamID),
	}

	queryMods = append(queryMods, mods...)

	query := Teams(queryMods...)
	queries.SetFrom(query.Query, "`teams`")

	return query
}

// LoadTeam allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (subscriberL) LoadTeam(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubscriber interface{}, mods queries.Applicator) error {
	var slice []*Subscriber
	var object *Subscriber

	if singular {
		object = maybeSubscriber.(*Subscriber)
	} else {
		slice = *maybeSubscriber.(*[]*Subscriber)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &subscriberR{}
		}
		if !queries.IsNil(object.TeamID) {
			args = append(args, object.TeamID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subscriberR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TeamID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TeamID) {
				args = append(args, obj.TeamID)
			}

		}
	}

	query := NewQuery(qm.From(`teams`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Team")
	}

	var resultSlice []*Team
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Team")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for teams")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for teams")
	}

	if len(subscriberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Team = foreign
		if foreign.R == nil {
			foreign.R = &teamR{}
		}
		foreign.R.Subscribers = append(foreign.R.Subscribers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TeamID, foreign.ID) {
				local.R.Team = foreign
				if foreign.R == nil {
					foreign.R = &teamR{}
				}
				foreign.R.Subscribers = append(foreign.R.Subscribers, local)
				break
			}
		}
	}

	return nil
}

// SetTeam of the subscriber to the related item.
// Sets o.R.Team to related.
// Adds o to related.R.Subscribers.
func (o *Subscriber) SetTeam(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Team) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `subscribers` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"team_id"}),
		strmangle.WhereClause("`", "`", 0, subscriberPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TeamID, related.ID)
	if o.R == nil {
		o.R = &subscriberR{
			Team: related,
		}
	} else {
		o.R.Team = related
	}

	if related.R == nil {
		related.R = &teamR{
			Subscribers: SubscriberSlice{o},
		}
	} else {
		related.R.Subscribers = append(related.R.Subscribers, o)
	}

	return nil
}

// RemoveTeam relationship.
// Sets o.R.Team to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Subscriber) RemoveTeam(ctx context.Context, exec boil.ContextExecutor, related *Team) error {
	var err error

	queries.SetScanner(&o.TeamID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("team_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Team = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Subscribers {
		if queries.Equal(o.TeamID, ri.TeamID) {
			continue
		}

		ln := len(related.R.Subscribers)
		if ln > 1 && i < ln-1 {
			related.R.Subscribers[i] = related.R.Subscribers[ln-1]
		}
		related.R.Subscribers = related.R.Subscribers[:ln-1]
		break
	}
	return nil
}

// Subscribers retrieves all the records using an executor.
func Subscribers(mods ...qm.QueryMod) subscriberQuery {
	mods = append(mods, qm.From("`subscribers`"))
	return subscriberQuery{NewQuery(mods...)}
}

// FindSubscriber retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSubscriber(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*Subscriber, error) {
	subscriberObj := &Subscriber{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `subscribers` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, subscriberObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from subscribers")
	}

	return subscriberObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Subscriber) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no subscribers provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(subscriberColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	subscriberInsertCacheMut.RLock()
	cache, cached := subscriberInsertCache[key]
	subscriberInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			subscriberColumns,
			subscriberColumnsWithDefault,
			subscriberColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(subscriberType, subscriberMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(subscriberType, subscriberMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `subscribers` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `subscribers` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `subscribers` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, subscriberPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into subscribers")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == subscriberMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for subscribers")
	}

CacheNoHooks:
	if !cached {
		subscriberInsertCacheMut.Lock()
		subscriberInsertCache[key] = cache
		subscriberInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Subscriber.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Subscriber) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	subscriberUpdateCacheMut.RLock()
	cache, cached := subscriberUpdateCache[key]
	subscriberUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			subscriberColumns,
			subscriberPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update subscribers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `subscribers` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, subscriberPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(subscriberType, subscriberMapping, append(wl, subscriberPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update subscribers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for subscribers")
	}

	if !cached {
		subscriberUpdateCacheMut.Lock()
		subscriberUpdateCache[key] = cache
		subscriberUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q subscriberQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for subscribers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for subscribers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SubscriberSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subscriberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `subscribers` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, subscriberPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in subscriber slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all subscriber")
	}
	return rowsAff, nil
}

var mySQLSubscriberUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Subscriber) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no subscribers provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(subscriberColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSubscriberUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	subscriberUpsertCacheMut.RLock()
	cache, cached := subscriberUpsertCache[key]
	subscriberUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			subscriberColumns,
			subscriberColumnsWithDefault,
			subscriberColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			subscriberColumns,
			subscriberPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert subscribers, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "subscribers", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `subscribers` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(subscriberType, subscriberMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(subscriberType, subscriberMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for subscribers")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == subscriberMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(subscriberType, subscriberMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for subscribers")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for subscribers")
	}

CacheNoHooks:
	if !cached {
		subscriberUpsertCacheMut.Lock()
		subscriberUpsertCache[key] = cache
		subscriberUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Subscriber record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Subscriber) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Subscriber provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), subscriberPrimaryKeyMapping)
	sql := "DELETE FROM `subscribers` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from subscribers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for subscribers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q subscriberQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no subscriberQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from subscribers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for subscribers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SubscriberSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Subscriber slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(subscriberBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subscriberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `subscribers` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, subscriberPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from subscriber slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for subscribers")
	}

	if len(subscriberAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Subscriber) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSubscriber(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SubscriberSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SubscriberSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subscriberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `subscribers`.* FROM `subscribers` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, subscriberPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SubscriberSlice")
	}

	*o = slice

	return nil
}

// SubscriberExists checks if the Subscriber row exists.
func SubscriberExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `subscribers` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if subscribers exists")
	}

	return exists, nil
}
