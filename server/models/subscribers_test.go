// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSubscribers(t *testing.T) {
	t.Parallel()

	query := Subscribers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSubscribersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Subscriber{}
	if err = randomize.Struct(seed, o, subscriberDBTypes, true, subscriberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subscriber struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Subscribers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSubscribersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Subscriber{}
	if err = randomize.Struct(seed, o, subscriberDBTypes, true, subscriberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subscriber struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Subscribers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Subscribers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSubscribersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Subscriber{}
	if err = randomize.Struct(seed, o, subscriberDBTypes, true, subscriberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subscriber struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SubscriberSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Subscribers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSubscribersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Subscriber{}
	if err = randomize.Struct(seed, o, subscriberDBTypes, true, subscriberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subscriber struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SubscriberExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Subscriber exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SubscriberExists to return true, but got false.")
	}
}

func testSubscribersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Subscriber{}
	if err = randomize.Struct(seed, o, subscriberDBTypes, true, subscriberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subscriber struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	subscriberFound, err := FindSubscriber(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if subscriberFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSubscribersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Subscriber{}
	if err = randomize.Struct(seed, o, subscriberDBTypes, true, subscriberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subscriber struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Subscribers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSubscribersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Subscriber{}
	if err = randomize.Struct(seed, o, subscriberDBTypes, true, subscriberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subscriber struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Subscribers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSubscribersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	subscriberOne := &Subscriber{}
	subscriberTwo := &Subscriber{}
	if err = randomize.Struct(seed, subscriberOne, subscriberDBTypes, false, subscriberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subscriber struct: %s", err)
	}
	if err = randomize.Struct(seed, subscriberTwo, subscriberDBTypes, false, subscriberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subscriber struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = subscriberOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = subscriberTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Subscribers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSubscribersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	subscriberOne := &Subscriber{}
	subscriberTwo := &Subscriber{}
	if err = randomize.Struct(seed, subscriberOne, subscriberDBTypes, false, subscriberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subscriber struct: %s", err)
	}
	if err = randomize.Struct(seed, subscriberTwo, subscriberDBTypes, false, subscriberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subscriber struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = subscriberOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = subscriberTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Subscribers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func subscriberBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Subscriber) error {
	*o = Subscriber{}
	return nil
}

func subscriberAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Subscriber) error {
	*o = Subscriber{}
	return nil
}

func subscriberAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Subscriber) error {
	*o = Subscriber{}
	return nil
}

func subscriberBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Subscriber) error {
	*o = Subscriber{}
	return nil
}

func subscriberAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Subscriber) error {
	*o = Subscriber{}
	return nil
}

func subscriberBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Subscriber) error {
	*o = Subscriber{}
	return nil
}

func subscriberAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Subscriber) error {
	*o = Subscriber{}
	return nil
}

func subscriberBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Subscriber) error {
	*o = Subscriber{}
	return nil
}

func subscriberAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Subscriber) error {
	*o = Subscriber{}
	return nil
}

func testSubscribersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Subscriber{}
	o := &Subscriber{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, subscriberDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Subscriber object: %s", err)
	}

	AddSubscriberHook(boil.BeforeInsertHook, subscriberBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	subscriberBeforeInsertHooks = []SubscriberHook{}

	AddSubscriberHook(boil.AfterInsertHook, subscriberAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	subscriberAfterInsertHooks = []SubscriberHook{}

	AddSubscriberHook(boil.AfterSelectHook, subscriberAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	subscriberAfterSelectHooks = []SubscriberHook{}

	AddSubscriberHook(boil.BeforeUpdateHook, subscriberBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	subscriberBeforeUpdateHooks = []SubscriberHook{}

	AddSubscriberHook(boil.AfterUpdateHook, subscriberAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	subscriberAfterUpdateHooks = []SubscriberHook{}

	AddSubscriberHook(boil.BeforeDeleteHook, subscriberBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	subscriberBeforeDeleteHooks = []SubscriberHook{}

	AddSubscriberHook(boil.AfterDeleteHook, subscriberAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	subscriberAfterDeleteHooks = []SubscriberHook{}

	AddSubscriberHook(boil.BeforeUpsertHook, subscriberBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	subscriberBeforeUpsertHooks = []SubscriberHook{}

	AddSubscriberHook(boil.AfterUpsertHook, subscriberAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	subscriberAfterUpsertHooks = []SubscriberHook{}
}

func testSubscribersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Subscriber{}
	if err = randomize.Struct(seed, o, subscriberDBTypes, true, subscriberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subscriber struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Subscribers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSubscribersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Subscriber{}
	if err = randomize.Struct(seed, o, subscriberDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Subscriber struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(subscriberColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Subscribers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSubscriberToOneTeamUsingTeam(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Subscriber
	var foreign Team

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, subscriberDBTypes, true, subscriberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subscriber struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, teamDBTypes, false, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.TeamID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Team().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SubscriberSlice{&local}
	if err = local.L.LoadTeam(ctx, tx, false, (*[]*Subscriber)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Team == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Team = nil
	if err = local.L.LoadTeam(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Team == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSubscriberToOneSetOpTeamUsingTeam(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Subscriber
	var b, c Team

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, subscriberDBTypes, false, strmangle.SetComplement(subscriberPrimaryKeyColumns, subscriberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Team{&b, &c} {
		err = a.SetTeam(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Team != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Subscribers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.TeamID, x.ID) {
			t.Error("foreign key was wrong value", a.TeamID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TeamID))
		reflect.Indirect(reflect.ValueOf(&a.TeamID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.TeamID, x.ID) {
			t.Error("foreign key was wrong value", a.TeamID, x.ID)
		}
	}
}

func testSubscriberToOneRemoveOpTeamUsingTeam(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Subscriber
	var b Team

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, subscriberDBTypes, false, strmangle.SetComplement(subscriberPrimaryKeyColumns, subscriberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetTeam(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveTeam(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Team().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Team != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.TeamID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Subscribers) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testSubscribersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Subscriber{}
	if err = randomize.Struct(seed, o, subscriberDBTypes, true, subscriberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subscriber struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSubscribersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Subscriber{}
	if err = randomize.Struct(seed, o, subscriberDBTypes, true, subscriberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subscriber struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SubscriberSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSubscribersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Subscriber{}
	if err = randomize.Struct(seed, o, subscriberDBTypes, true, subscriberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subscriber struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Subscribers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	subscriberDBTypes = map[string]string{`CreatedAt`: `timestamp`, `DeletedAt`: `timestamp`, `Email`: `varchar`, `ID`: `int`, `Referrer`: `varchar`, `TeamID`: `int`, `UpdatedAt`: `timestamp`}
	_                 = bytes.MinRead
)

func testSubscribersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(subscriberPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(subscriberColumns) == len(subscriberPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Subscriber{}
	if err = randomize.Struct(seed, o, subscriberDBTypes, true, subscriberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subscriber struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Subscribers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, subscriberDBTypes, true, subscriberPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Subscriber struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSubscribersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(subscriberColumns) == len(subscriberPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Subscriber{}
	if err = randomize.Struct(seed, o, subscriberDBTypes, true, subscriberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subscriber struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Subscribers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, subscriberDBTypes, true, subscriberPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Subscriber struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(subscriberColumns, subscriberPrimaryKeyColumns) {
		fields = subscriberColumns
	} else {
		fields = strmangle.SetComplement(
			subscriberColumns,
			subscriberPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SubscriberSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSubscribersUpsert(t *testing.T) {
	t.Parallel()

	if len(subscriberColumns) == len(subscriberPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLSubscriberUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Subscriber{}
	if err = randomize.Struct(seed, &o, subscriberDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Subscriber struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Subscriber: %s", err)
	}

	count, err := Subscribers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, subscriberDBTypes, false, subscriberPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Subscriber struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Subscriber: %s", err)
	}

	count, err = Subscribers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
