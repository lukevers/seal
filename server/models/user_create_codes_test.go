// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserCreateCodes(t *testing.T) {
	t.Parallel()

	query := UserCreateCodes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserCreateCodesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserCreateCode{}
	if err = randomize.Struct(seed, o, userCreateCodeDBTypes, true, userCreateCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserCreateCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserCreateCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserCreateCodesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserCreateCode{}
	if err = randomize.Struct(seed, o, userCreateCodeDBTypes, true, userCreateCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserCreateCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserCreateCodes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserCreateCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserCreateCodesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserCreateCode{}
	if err = randomize.Struct(seed, o, userCreateCodeDBTypes, true, userCreateCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserCreateCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserCreateCodeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserCreateCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserCreateCodesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserCreateCode{}
	if err = randomize.Struct(seed, o, userCreateCodeDBTypes, true, userCreateCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserCreateCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserCreateCodeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if UserCreateCode exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserCreateCodeExists to return true, but got false.")
	}
}

func testUserCreateCodesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserCreateCode{}
	if err = randomize.Struct(seed, o, userCreateCodeDBTypes, true, userCreateCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserCreateCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userCreateCodeFound, err := FindUserCreateCode(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if userCreateCodeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserCreateCodesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserCreateCode{}
	if err = randomize.Struct(seed, o, userCreateCodeDBTypes, true, userCreateCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserCreateCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserCreateCodes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserCreateCodesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserCreateCode{}
	if err = randomize.Struct(seed, o, userCreateCodeDBTypes, true, userCreateCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserCreateCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserCreateCodes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserCreateCodesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userCreateCodeOne := &UserCreateCode{}
	userCreateCodeTwo := &UserCreateCode{}
	if err = randomize.Struct(seed, userCreateCodeOne, userCreateCodeDBTypes, false, userCreateCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserCreateCode struct: %s", err)
	}
	if err = randomize.Struct(seed, userCreateCodeTwo, userCreateCodeDBTypes, false, userCreateCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserCreateCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userCreateCodeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userCreateCodeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserCreateCodes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserCreateCodesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userCreateCodeOne := &UserCreateCode{}
	userCreateCodeTwo := &UserCreateCode{}
	if err = randomize.Struct(seed, userCreateCodeOne, userCreateCodeDBTypes, false, userCreateCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserCreateCode struct: %s", err)
	}
	if err = randomize.Struct(seed, userCreateCodeTwo, userCreateCodeDBTypes, false, userCreateCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserCreateCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userCreateCodeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userCreateCodeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserCreateCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userCreateCodeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserCreateCode) error {
	*o = UserCreateCode{}
	return nil
}

func userCreateCodeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserCreateCode) error {
	*o = UserCreateCode{}
	return nil
}

func userCreateCodeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UserCreateCode) error {
	*o = UserCreateCode{}
	return nil
}

func userCreateCodeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserCreateCode) error {
	*o = UserCreateCode{}
	return nil
}

func userCreateCodeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserCreateCode) error {
	*o = UserCreateCode{}
	return nil
}

func userCreateCodeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserCreateCode) error {
	*o = UserCreateCode{}
	return nil
}

func userCreateCodeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserCreateCode) error {
	*o = UserCreateCode{}
	return nil
}

func userCreateCodeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserCreateCode) error {
	*o = UserCreateCode{}
	return nil
}

func userCreateCodeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserCreateCode) error {
	*o = UserCreateCode{}
	return nil
}

func testUserCreateCodesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UserCreateCode{}
	o := &UserCreateCode{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userCreateCodeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserCreateCode object: %s", err)
	}

	AddUserCreateCodeHook(boil.BeforeInsertHook, userCreateCodeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userCreateCodeBeforeInsertHooks = []UserCreateCodeHook{}

	AddUserCreateCodeHook(boil.AfterInsertHook, userCreateCodeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userCreateCodeAfterInsertHooks = []UserCreateCodeHook{}

	AddUserCreateCodeHook(boil.AfterSelectHook, userCreateCodeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userCreateCodeAfterSelectHooks = []UserCreateCodeHook{}

	AddUserCreateCodeHook(boil.BeforeUpdateHook, userCreateCodeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userCreateCodeBeforeUpdateHooks = []UserCreateCodeHook{}

	AddUserCreateCodeHook(boil.AfterUpdateHook, userCreateCodeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userCreateCodeAfterUpdateHooks = []UserCreateCodeHook{}

	AddUserCreateCodeHook(boil.BeforeDeleteHook, userCreateCodeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userCreateCodeBeforeDeleteHooks = []UserCreateCodeHook{}

	AddUserCreateCodeHook(boil.AfterDeleteHook, userCreateCodeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userCreateCodeAfterDeleteHooks = []UserCreateCodeHook{}

	AddUserCreateCodeHook(boil.BeforeUpsertHook, userCreateCodeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userCreateCodeBeforeUpsertHooks = []UserCreateCodeHook{}

	AddUserCreateCodeHook(boil.AfterUpsertHook, userCreateCodeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userCreateCodeAfterUpsertHooks = []UserCreateCodeHook{}
}

func testUserCreateCodesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserCreateCode{}
	if err = randomize.Struct(seed, o, userCreateCodeDBTypes, true, userCreateCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserCreateCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserCreateCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserCreateCodesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserCreateCode{}
	if err = randomize.Struct(seed, o, userCreateCodeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserCreateCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userCreateCodeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserCreateCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserCreateCodeToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserCreateCode
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userCreateCodeDBTypes, true, userCreateCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserCreateCode struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UserID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserCreateCodeSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*UserCreateCode)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserCreateCodeToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserCreateCode
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userCreateCodeDBTypes, false, strmangle.SetComplement(userCreateCodePrimaryKeyColumns, userCreateCodeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserCreateCodes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testUserCreateCodeToOneRemoveOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserCreateCode
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userCreateCodeDBTypes, false, strmangle.SetComplement(userCreateCodePrimaryKeyColumns, userCreateCodeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUser(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUser(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.User().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.User != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.UserID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.UserCreateCodes) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testUserCreateCodesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserCreateCode{}
	if err = randomize.Struct(seed, o, userCreateCodeDBTypes, true, userCreateCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserCreateCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserCreateCodesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserCreateCode{}
	if err = randomize.Struct(seed, o, userCreateCodeDBTypes, true, userCreateCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserCreateCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserCreateCodeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserCreateCodesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserCreateCode{}
	if err = randomize.Struct(seed, o, userCreateCodeDBTypes, true, userCreateCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserCreateCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserCreateCodes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userCreateCodeDBTypes = map[string]string{`Code`: `varchar`, `CreatedAt`: `timestamp`, `ID`: `int`, `RedeemedAt`: `datetime`, `UserID`: `int`}
	_                     = bytes.MinRead
)

func testUserCreateCodesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userCreateCodePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userCreateCodeColumns) == len(userCreateCodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserCreateCode{}
	if err = randomize.Struct(seed, o, userCreateCodeDBTypes, true, userCreateCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserCreateCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserCreateCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userCreateCodeDBTypes, true, userCreateCodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserCreateCode struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserCreateCodesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userCreateCodeColumns) == len(userCreateCodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserCreateCode{}
	if err = randomize.Struct(seed, o, userCreateCodeDBTypes, true, userCreateCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserCreateCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserCreateCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userCreateCodeDBTypes, true, userCreateCodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserCreateCode struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userCreateCodeColumns, userCreateCodePrimaryKeyColumns) {
		fields = userCreateCodeColumns
	} else {
		fields = strmangle.SetComplement(
			userCreateCodeColumns,
			userCreateCodePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserCreateCodeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserCreateCodesUpsert(t *testing.T) {
	t.Parallel()

	if len(userCreateCodeColumns) == len(userCreateCodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLUserCreateCodeUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserCreateCode{}
	if err = randomize.Struct(seed, &o, userCreateCodeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserCreateCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserCreateCode: %s", err)
	}

	count, err := UserCreateCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userCreateCodeDBTypes, false, userCreateCodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserCreateCode struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserCreateCode: %s", err)
	}

	count, err = UserCreateCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
