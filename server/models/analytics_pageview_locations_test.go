// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAnalyticsPageviewLocations(t *testing.T) {
	t.Parallel()

	query := AnalyticsPageviewLocations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAnalyticsPageviewLocationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewLocation{}
	if err = randomize.Struct(seed, o, analyticsPageviewLocationDBTypes, true, analyticsPageviewLocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewLocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AnalyticsPageviewLocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnalyticsPageviewLocationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewLocation{}
	if err = randomize.Struct(seed, o, analyticsPageviewLocationDBTypes, true, analyticsPageviewLocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewLocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AnalyticsPageviewLocations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AnalyticsPageviewLocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnalyticsPageviewLocationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewLocation{}
	if err = randomize.Struct(seed, o, analyticsPageviewLocationDBTypes, true, analyticsPageviewLocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewLocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AnalyticsPageviewLocationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AnalyticsPageviewLocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnalyticsPageviewLocationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewLocation{}
	if err = randomize.Struct(seed, o, analyticsPageviewLocationDBTypes, true, analyticsPageviewLocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewLocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AnalyticsPageviewLocationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AnalyticsPageviewLocation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AnalyticsPageviewLocationExists to return true, but got false.")
	}
}

func testAnalyticsPageviewLocationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewLocation{}
	if err = randomize.Struct(seed, o, analyticsPageviewLocationDBTypes, true, analyticsPageviewLocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewLocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	analyticsPageviewLocationFound, err := FindAnalyticsPageviewLocation(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if analyticsPageviewLocationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAnalyticsPageviewLocationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewLocation{}
	if err = randomize.Struct(seed, o, analyticsPageviewLocationDBTypes, true, analyticsPageviewLocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewLocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AnalyticsPageviewLocations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAnalyticsPageviewLocationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewLocation{}
	if err = randomize.Struct(seed, o, analyticsPageviewLocationDBTypes, true, analyticsPageviewLocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewLocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AnalyticsPageviewLocations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAnalyticsPageviewLocationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	analyticsPageviewLocationOne := &AnalyticsPageviewLocation{}
	analyticsPageviewLocationTwo := &AnalyticsPageviewLocation{}
	if err = randomize.Struct(seed, analyticsPageviewLocationOne, analyticsPageviewLocationDBTypes, false, analyticsPageviewLocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewLocation struct: %s", err)
	}
	if err = randomize.Struct(seed, analyticsPageviewLocationTwo, analyticsPageviewLocationDBTypes, false, analyticsPageviewLocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewLocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = analyticsPageviewLocationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = analyticsPageviewLocationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AnalyticsPageviewLocations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAnalyticsPageviewLocationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	analyticsPageviewLocationOne := &AnalyticsPageviewLocation{}
	analyticsPageviewLocationTwo := &AnalyticsPageviewLocation{}
	if err = randomize.Struct(seed, analyticsPageviewLocationOne, analyticsPageviewLocationDBTypes, false, analyticsPageviewLocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewLocation struct: %s", err)
	}
	if err = randomize.Struct(seed, analyticsPageviewLocationTwo, analyticsPageviewLocationDBTypes, false, analyticsPageviewLocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewLocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = analyticsPageviewLocationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = analyticsPageviewLocationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnalyticsPageviewLocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func analyticsPageviewLocationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageviewLocation) error {
	*o = AnalyticsPageviewLocation{}
	return nil
}

func analyticsPageviewLocationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageviewLocation) error {
	*o = AnalyticsPageviewLocation{}
	return nil
}

func analyticsPageviewLocationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageviewLocation) error {
	*o = AnalyticsPageviewLocation{}
	return nil
}

func analyticsPageviewLocationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageviewLocation) error {
	*o = AnalyticsPageviewLocation{}
	return nil
}

func analyticsPageviewLocationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageviewLocation) error {
	*o = AnalyticsPageviewLocation{}
	return nil
}

func analyticsPageviewLocationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageviewLocation) error {
	*o = AnalyticsPageviewLocation{}
	return nil
}

func analyticsPageviewLocationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageviewLocation) error {
	*o = AnalyticsPageviewLocation{}
	return nil
}

func analyticsPageviewLocationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageviewLocation) error {
	*o = AnalyticsPageviewLocation{}
	return nil
}

func analyticsPageviewLocationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageviewLocation) error {
	*o = AnalyticsPageviewLocation{}
	return nil
}

func testAnalyticsPageviewLocationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AnalyticsPageviewLocation{}
	o := &AnalyticsPageviewLocation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, analyticsPageviewLocationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewLocation object: %s", err)
	}

	AddAnalyticsPageviewLocationHook(boil.BeforeInsertHook, analyticsPageviewLocationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewLocationBeforeInsertHooks = []AnalyticsPageviewLocationHook{}

	AddAnalyticsPageviewLocationHook(boil.AfterInsertHook, analyticsPageviewLocationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewLocationAfterInsertHooks = []AnalyticsPageviewLocationHook{}

	AddAnalyticsPageviewLocationHook(boil.AfterSelectHook, analyticsPageviewLocationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewLocationAfterSelectHooks = []AnalyticsPageviewLocationHook{}

	AddAnalyticsPageviewLocationHook(boil.BeforeUpdateHook, analyticsPageviewLocationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewLocationBeforeUpdateHooks = []AnalyticsPageviewLocationHook{}

	AddAnalyticsPageviewLocationHook(boil.AfterUpdateHook, analyticsPageviewLocationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewLocationAfterUpdateHooks = []AnalyticsPageviewLocationHook{}

	AddAnalyticsPageviewLocationHook(boil.BeforeDeleteHook, analyticsPageviewLocationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewLocationBeforeDeleteHooks = []AnalyticsPageviewLocationHook{}

	AddAnalyticsPageviewLocationHook(boil.AfterDeleteHook, analyticsPageviewLocationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewLocationAfterDeleteHooks = []AnalyticsPageviewLocationHook{}

	AddAnalyticsPageviewLocationHook(boil.BeforeUpsertHook, analyticsPageviewLocationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewLocationBeforeUpsertHooks = []AnalyticsPageviewLocationHook{}

	AddAnalyticsPageviewLocationHook(boil.AfterUpsertHook, analyticsPageviewLocationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewLocationAfterUpsertHooks = []AnalyticsPageviewLocationHook{}
}

func testAnalyticsPageviewLocationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewLocation{}
	if err = randomize.Struct(seed, o, analyticsPageviewLocationDBTypes, true, analyticsPageviewLocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewLocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnalyticsPageviewLocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAnalyticsPageviewLocationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewLocation{}
	if err = randomize.Struct(seed, o, analyticsPageviewLocationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewLocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(analyticsPageviewLocationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AnalyticsPageviewLocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAnalyticsPageviewLocationToOneAnalyticsPageviewUsingPageview(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AnalyticsPageviewLocation
	var foreign AnalyticsPageview

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, analyticsPageviewLocationDBTypes, false, analyticsPageviewLocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewLocation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, analyticsPageviewDBTypes, false, analyticsPageviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageview struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PageviewID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Pageview().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AnalyticsPageviewLocationSlice{&local}
	if err = local.L.LoadPageview(ctx, tx, false, (*[]*AnalyticsPageviewLocation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Pageview == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Pageview = nil
	if err = local.L.LoadPageview(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Pageview == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAnalyticsPageviewLocationToOneSetOpAnalyticsPageviewUsingPageview(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AnalyticsPageviewLocation
	var b, c AnalyticsPageview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, analyticsPageviewLocationDBTypes, false, strmangle.SetComplement(analyticsPageviewLocationPrimaryKeyColumns, analyticsPageviewLocationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, analyticsPageviewDBTypes, false, strmangle.SetComplement(analyticsPageviewPrimaryKeyColumns, analyticsPageviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, analyticsPageviewDBTypes, false, strmangle.SetComplement(analyticsPageviewPrimaryKeyColumns, analyticsPageviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*AnalyticsPageview{&b, &c} {
		err = a.SetPageview(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Pageview != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PageviewAnalyticsPageviewLocations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PageviewID != x.ID {
			t.Error("foreign key was wrong value", a.PageviewID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PageviewID))
		reflect.Indirect(reflect.ValueOf(&a.PageviewID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PageviewID != x.ID {
			t.Error("foreign key was wrong value", a.PageviewID, x.ID)
		}
	}
}

func testAnalyticsPageviewLocationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewLocation{}
	if err = randomize.Struct(seed, o, analyticsPageviewLocationDBTypes, true, analyticsPageviewLocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewLocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAnalyticsPageviewLocationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewLocation{}
	if err = randomize.Struct(seed, o, analyticsPageviewLocationDBTypes, true, analyticsPageviewLocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewLocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AnalyticsPageviewLocationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAnalyticsPageviewLocationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewLocation{}
	if err = randomize.Struct(seed, o, analyticsPageviewLocationDBTypes, true, analyticsPageviewLocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewLocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AnalyticsPageviewLocations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	analyticsPageviewLocationDBTypes = map[string]string{`ID`: `bigint`, `PageviewID`: `bigint`}
	_                                = bytes.MinRead
)

func testAnalyticsPageviewLocationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(analyticsPageviewLocationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(analyticsPageviewLocationColumns) == len(analyticsPageviewLocationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewLocation{}
	if err = randomize.Struct(seed, o, analyticsPageviewLocationDBTypes, true, analyticsPageviewLocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewLocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnalyticsPageviewLocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, analyticsPageviewLocationDBTypes, true, analyticsPageviewLocationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewLocation struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAnalyticsPageviewLocationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(analyticsPageviewLocationColumns) == len(analyticsPageviewLocationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewLocation{}
	if err = randomize.Struct(seed, o, analyticsPageviewLocationDBTypes, true, analyticsPageviewLocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewLocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnalyticsPageviewLocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, analyticsPageviewLocationDBTypes, true, analyticsPageviewLocationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewLocation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(analyticsPageviewLocationColumns, analyticsPageviewLocationPrimaryKeyColumns) {
		fields = analyticsPageviewLocationColumns
	} else {
		fields = strmangle.SetComplement(
			analyticsPageviewLocationColumns,
			analyticsPageviewLocationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AnalyticsPageviewLocationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAnalyticsPageviewLocationsUpsert(t *testing.T) {
	t.Parallel()

	if len(analyticsPageviewLocationColumns) == len(analyticsPageviewLocationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLAnalyticsPageviewLocationUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AnalyticsPageviewLocation{}
	if err = randomize.Struct(seed, &o, analyticsPageviewLocationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewLocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AnalyticsPageviewLocation: %s", err)
	}

	count, err := AnalyticsPageviewLocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, analyticsPageviewLocationDBTypes, false, analyticsPageviewLocationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewLocation struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AnalyticsPageviewLocation: %s", err)
	}

	count, err = AnalyticsPageviewLocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
