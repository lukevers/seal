// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// AnalyticsPageviewUseragent is an object representing the database table.
type AnalyticsPageviewUseragent struct {
	ID                   uint64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	PageviewID           uint64      `boil:"pageview_id" json:"pageview_id" toml:"pageview_id" yaml:"pageview_id"`
	BrowserName          null.String `boil:"browser_name" json:"browser_name,omitempty" toml:"browser_name" yaml:"browser_name,omitempty"`
	BrowserVersion       null.String `boil:"browser_version" json:"browser_version,omitempty" toml:"browser_version" yaml:"browser_version,omitempty"`
	BrowserEngine        null.String `boil:"browser_engine" json:"browser_engine,omitempty" toml:"browser_engine" yaml:"browser_engine,omitempty"`
	BrowserEngineVersion null.String `boil:"browser_engine_version" json:"browser_engine_version,omitempty" toml:"browser_engine_version" yaml:"browser_engine_version,omitempty"`
	Localization         null.String `boil:"localization" json:"localization,omitempty" toml:"localization" yaml:"localization,omitempty"`
	IsMobile             null.Bool   `boil:"is_mobile" json:"is_mobile,omitempty" toml:"is_mobile" yaml:"is_mobile,omitempty"`
	IsBot                null.Bool   `boil:"is_bot" json:"is_bot,omitempty" toml:"is_bot" yaml:"is_bot,omitempty"`
	OsName               null.String `boil:"os_name" json:"os_name,omitempty" toml:"os_name" yaml:"os_name,omitempty"`
	OsVersion            null.String `boil:"os_version" json:"os_version,omitempty" toml:"os_version" yaml:"os_version,omitempty"`
	Platform             null.String `boil:"platform" json:"platform,omitempty" toml:"platform" yaml:"platform,omitempty"`
	Raw                  null.String `boil:"raw" json:"raw,omitempty" toml:"raw" yaml:"raw,omitempty"`

	R *analyticsPageviewUseragentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L analyticsPageviewUseragentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AnalyticsPageviewUseragentColumns = struct {
	ID                   string
	PageviewID           string
	BrowserName          string
	BrowserVersion       string
	BrowserEngine        string
	BrowserEngineVersion string
	Localization         string
	IsMobile             string
	IsBot                string
	OsName               string
	OsVersion            string
	Platform             string
	Raw                  string
}{
	ID:                   "id",
	PageviewID:           "pageview_id",
	BrowserName:          "browser_name",
	BrowserVersion:       "browser_version",
	BrowserEngine:        "browser_engine",
	BrowserEngineVersion: "browser_engine_version",
	Localization:         "localization",
	IsMobile:             "is_mobile",
	IsBot:                "is_bot",
	OsName:               "os_name",
	OsVersion:            "os_version",
	Platform:             "platform",
	Raw:                  "raw",
}

// AnalyticsPageviewUseragentRels is where relationship names are stored.
var AnalyticsPageviewUseragentRels = struct {
	Pageview string
}{
	Pageview: "Pageview",
}

// analyticsPageviewUseragentR is where relationships are stored.
type analyticsPageviewUseragentR struct {
	Pageview *AnalyticsPageview
}

// NewStruct creates a new relationship struct
func (*analyticsPageviewUseragentR) NewStruct() *analyticsPageviewUseragentR {
	return &analyticsPageviewUseragentR{}
}

// analyticsPageviewUseragentL is where Load methods for each relationship are stored.
type analyticsPageviewUseragentL struct{}

var (
	analyticsPageviewUseragentColumns               = []string{"id", "pageview_id", "browser_name", "browser_version", "browser_engine", "browser_engine_version", "localization", "is_mobile", "is_bot", "os_name", "os_version", "platform", "raw"}
	analyticsPageviewUseragentColumnsWithoutDefault = []string{"pageview_id", "browser_name", "browser_version", "browser_engine", "browser_engine_version", "localization", "is_mobile", "is_bot", "os_name", "os_version", "platform", "raw"}
	analyticsPageviewUseragentColumnsWithDefault    = []string{"id"}
	analyticsPageviewUseragentPrimaryKeyColumns     = []string{"id"}
)

type (
	// AnalyticsPageviewUseragentSlice is an alias for a slice of pointers to AnalyticsPageviewUseragent.
	// This should generally be used opposed to []AnalyticsPageviewUseragent.
	AnalyticsPageviewUseragentSlice []*AnalyticsPageviewUseragent
	// AnalyticsPageviewUseragentHook is the signature for custom AnalyticsPageviewUseragent hook methods
	AnalyticsPageviewUseragentHook func(context.Context, boil.ContextExecutor, *AnalyticsPageviewUseragent) error

	analyticsPageviewUseragentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	analyticsPageviewUseragentType                 = reflect.TypeOf(&AnalyticsPageviewUseragent{})
	analyticsPageviewUseragentMapping              = queries.MakeStructMapping(analyticsPageviewUseragentType)
	analyticsPageviewUseragentPrimaryKeyMapping, _ = queries.BindMapping(analyticsPageviewUseragentType, analyticsPageviewUseragentMapping, analyticsPageviewUseragentPrimaryKeyColumns)
	analyticsPageviewUseragentInsertCacheMut       sync.RWMutex
	analyticsPageviewUseragentInsertCache          = make(map[string]insertCache)
	analyticsPageviewUseragentUpdateCacheMut       sync.RWMutex
	analyticsPageviewUseragentUpdateCache          = make(map[string]updateCache)
	analyticsPageviewUseragentUpsertCacheMut       sync.RWMutex
	analyticsPageviewUseragentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var analyticsPageviewUseragentBeforeInsertHooks []AnalyticsPageviewUseragentHook
var analyticsPageviewUseragentBeforeUpdateHooks []AnalyticsPageviewUseragentHook
var analyticsPageviewUseragentBeforeDeleteHooks []AnalyticsPageviewUseragentHook
var analyticsPageviewUseragentBeforeUpsertHooks []AnalyticsPageviewUseragentHook

var analyticsPageviewUseragentAfterInsertHooks []AnalyticsPageviewUseragentHook
var analyticsPageviewUseragentAfterSelectHooks []AnalyticsPageviewUseragentHook
var analyticsPageviewUseragentAfterUpdateHooks []AnalyticsPageviewUseragentHook
var analyticsPageviewUseragentAfterDeleteHooks []AnalyticsPageviewUseragentHook
var analyticsPageviewUseragentAfterUpsertHooks []AnalyticsPageviewUseragentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AnalyticsPageviewUseragent) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range analyticsPageviewUseragentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AnalyticsPageviewUseragent) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range analyticsPageviewUseragentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AnalyticsPageviewUseragent) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range analyticsPageviewUseragentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AnalyticsPageviewUseragent) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range analyticsPageviewUseragentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AnalyticsPageviewUseragent) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range analyticsPageviewUseragentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AnalyticsPageviewUseragent) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range analyticsPageviewUseragentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AnalyticsPageviewUseragent) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range analyticsPageviewUseragentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AnalyticsPageviewUseragent) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range analyticsPageviewUseragentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AnalyticsPageviewUseragent) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range analyticsPageviewUseragentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAnalyticsPageviewUseragentHook registers your hook function for all future operations.
func AddAnalyticsPageviewUseragentHook(hookPoint boil.HookPoint, analyticsPageviewUseragentHook AnalyticsPageviewUseragentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		analyticsPageviewUseragentBeforeInsertHooks = append(analyticsPageviewUseragentBeforeInsertHooks, analyticsPageviewUseragentHook)
	case boil.BeforeUpdateHook:
		analyticsPageviewUseragentBeforeUpdateHooks = append(analyticsPageviewUseragentBeforeUpdateHooks, analyticsPageviewUseragentHook)
	case boil.BeforeDeleteHook:
		analyticsPageviewUseragentBeforeDeleteHooks = append(analyticsPageviewUseragentBeforeDeleteHooks, analyticsPageviewUseragentHook)
	case boil.BeforeUpsertHook:
		analyticsPageviewUseragentBeforeUpsertHooks = append(analyticsPageviewUseragentBeforeUpsertHooks, analyticsPageviewUseragentHook)
	case boil.AfterInsertHook:
		analyticsPageviewUseragentAfterInsertHooks = append(analyticsPageviewUseragentAfterInsertHooks, analyticsPageviewUseragentHook)
	case boil.AfterSelectHook:
		analyticsPageviewUseragentAfterSelectHooks = append(analyticsPageviewUseragentAfterSelectHooks, analyticsPageviewUseragentHook)
	case boil.AfterUpdateHook:
		analyticsPageviewUseragentAfterUpdateHooks = append(analyticsPageviewUseragentAfterUpdateHooks, analyticsPageviewUseragentHook)
	case boil.AfterDeleteHook:
		analyticsPageviewUseragentAfterDeleteHooks = append(analyticsPageviewUseragentAfterDeleteHooks, analyticsPageviewUseragentHook)
	case boil.AfterUpsertHook:
		analyticsPageviewUseragentAfterUpsertHooks = append(analyticsPageviewUseragentAfterUpsertHooks, analyticsPageviewUseragentHook)
	}
}

// One returns a single analyticsPageviewUseragent record from the query.
func (q analyticsPageviewUseragentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AnalyticsPageviewUseragent, error) {
	o := &AnalyticsPageviewUseragent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for analytics_pageview_useragents")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AnalyticsPageviewUseragent records from the query.
func (q analyticsPageviewUseragentQuery) All(ctx context.Context, exec boil.ContextExecutor) (AnalyticsPageviewUseragentSlice, error) {
	var o []*AnalyticsPageviewUseragent

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AnalyticsPageviewUseragent slice")
	}

	if len(analyticsPageviewUseragentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AnalyticsPageviewUseragent records in the query.
func (q analyticsPageviewUseragentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count analytics_pageview_useragents rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q analyticsPageviewUseragentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if analytics_pageview_useragents exists")
	}

	return count > 0, nil
}

// Pageview pointed to by the foreign key.
func (o *AnalyticsPageviewUseragent) Pageview(mods ...qm.QueryMod) analyticsPageviewQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.PageviewID),
	}

	queryMods = append(queryMods, mods...)

	query := AnalyticsPageviews(queryMods...)
	queries.SetFrom(query.Query, "`analytics_pageviews`")

	return query
}

// LoadPageview allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (analyticsPageviewUseragentL) LoadPageview(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAnalyticsPageviewUseragent interface{}, mods queries.Applicator) error {
	var slice []*AnalyticsPageviewUseragent
	var object *AnalyticsPageviewUseragent

	if singular {
		object = maybeAnalyticsPageviewUseragent.(*AnalyticsPageviewUseragent)
	} else {
		slice = *maybeAnalyticsPageviewUseragent.(*[]*AnalyticsPageviewUseragent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &analyticsPageviewUseragentR{}
		}
		args = append(args, object.PageviewID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &analyticsPageviewUseragentR{}
			}

			for _, a := range args {
				if a == obj.PageviewID {
					continue Outer
				}
			}

			args = append(args, obj.PageviewID)

		}
	}

	query := NewQuery(qm.From(`analytics_pageviews`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AnalyticsPageview")
	}

	var resultSlice []*AnalyticsPageview
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AnalyticsPageview")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for analytics_pageviews")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for analytics_pageviews")
	}

	if len(analyticsPageviewUseragentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Pageview = foreign
		if foreign.R == nil {
			foreign.R = &analyticsPageviewR{}
		}
		foreign.R.PageviewAnalyticsPageviewUseragents = append(foreign.R.PageviewAnalyticsPageviewUseragents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PageviewID == foreign.ID {
				local.R.Pageview = foreign
				if foreign.R == nil {
					foreign.R = &analyticsPageviewR{}
				}
				foreign.R.PageviewAnalyticsPageviewUseragents = append(foreign.R.PageviewAnalyticsPageviewUseragents, local)
				break
			}
		}
	}

	return nil
}

// SetPageview of the analyticsPageviewUseragent to the related item.
// Sets o.R.Pageview to related.
// Adds o to related.R.PageviewAnalyticsPageviewUseragents.
func (o *AnalyticsPageviewUseragent) SetPageview(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AnalyticsPageview) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `analytics_pageview_useragents` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"pageview_id"}),
		strmangle.WhereClause("`", "`", 0, analyticsPageviewUseragentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PageviewID = related.ID
	if o.R == nil {
		o.R = &analyticsPageviewUseragentR{
			Pageview: related,
		}
	} else {
		o.R.Pageview = related
	}

	if related.R == nil {
		related.R = &analyticsPageviewR{
			PageviewAnalyticsPageviewUseragents: AnalyticsPageviewUseragentSlice{o},
		}
	} else {
		related.R.PageviewAnalyticsPageviewUseragents = append(related.R.PageviewAnalyticsPageviewUseragents, o)
	}

	return nil
}

// AnalyticsPageviewUseragents retrieves all the records using an executor.
func AnalyticsPageviewUseragents(mods ...qm.QueryMod) analyticsPageviewUseragentQuery {
	mods = append(mods, qm.From("`analytics_pageview_useragents`"))
	return analyticsPageviewUseragentQuery{NewQuery(mods...)}
}

// FindAnalyticsPageviewUseragent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAnalyticsPageviewUseragent(ctx context.Context, exec boil.ContextExecutor, iD uint64, selectCols ...string) (*AnalyticsPageviewUseragent, error) {
	analyticsPageviewUseragentObj := &AnalyticsPageviewUseragent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `analytics_pageview_useragents` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, analyticsPageviewUseragentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from analytics_pageview_useragents")
	}

	return analyticsPageviewUseragentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AnalyticsPageviewUseragent) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no analytics_pageview_useragents provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(analyticsPageviewUseragentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	analyticsPageviewUseragentInsertCacheMut.RLock()
	cache, cached := analyticsPageviewUseragentInsertCache[key]
	analyticsPageviewUseragentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			analyticsPageviewUseragentColumns,
			analyticsPageviewUseragentColumnsWithDefault,
			analyticsPageviewUseragentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(analyticsPageviewUseragentType, analyticsPageviewUseragentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(analyticsPageviewUseragentType, analyticsPageviewUseragentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `analytics_pageview_useragents` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `analytics_pageview_useragents` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `analytics_pageview_useragents` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, analyticsPageviewUseragentPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into analytics_pageview_useragents")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == analyticsPageviewUseragentMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for analytics_pageview_useragents")
	}

CacheNoHooks:
	if !cached {
		analyticsPageviewUseragentInsertCacheMut.Lock()
		analyticsPageviewUseragentInsertCache[key] = cache
		analyticsPageviewUseragentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AnalyticsPageviewUseragent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AnalyticsPageviewUseragent) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	analyticsPageviewUseragentUpdateCacheMut.RLock()
	cache, cached := analyticsPageviewUseragentUpdateCache[key]
	analyticsPageviewUseragentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			analyticsPageviewUseragentColumns,
			analyticsPageviewUseragentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update analytics_pageview_useragents, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `analytics_pageview_useragents` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, analyticsPageviewUseragentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(analyticsPageviewUseragentType, analyticsPageviewUseragentMapping, append(wl, analyticsPageviewUseragentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update analytics_pageview_useragents row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for analytics_pageview_useragents")
	}

	if !cached {
		analyticsPageviewUseragentUpdateCacheMut.Lock()
		analyticsPageviewUseragentUpdateCache[key] = cache
		analyticsPageviewUseragentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q analyticsPageviewUseragentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for analytics_pageview_useragents")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for analytics_pageview_useragents")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AnalyticsPageviewUseragentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), analyticsPageviewUseragentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `analytics_pageview_useragents` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, analyticsPageviewUseragentPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in analyticsPageviewUseragent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all analyticsPageviewUseragent")
	}
	return rowsAff, nil
}

var mySQLAnalyticsPageviewUseragentUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AnalyticsPageviewUseragent) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no analytics_pageview_useragents provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(analyticsPageviewUseragentColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLAnalyticsPageviewUseragentUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	analyticsPageviewUseragentUpsertCacheMut.RLock()
	cache, cached := analyticsPageviewUseragentUpsertCache[key]
	analyticsPageviewUseragentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			analyticsPageviewUseragentColumns,
			analyticsPageviewUseragentColumnsWithDefault,
			analyticsPageviewUseragentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			analyticsPageviewUseragentColumns,
			analyticsPageviewUseragentPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert analytics_pageview_useragents, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "analytics_pageview_useragents", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `analytics_pageview_useragents` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(analyticsPageviewUseragentType, analyticsPageviewUseragentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(analyticsPageviewUseragentType, analyticsPageviewUseragentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for analytics_pageview_useragents")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == analyticsPageviewUseragentMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(analyticsPageviewUseragentType, analyticsPageviewUseragentMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for analytics_pageview_useragents")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for analytics_pageview_useragents")
	}

CacheNoHooks:
	if !cached {
		analyticsPageviewUseragentUpsertCacheMut.Lock()
		analyticsPageviewUseragentUpsertCache[key] = cache
		analyticsPageviewUseragentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AnalyticsPageviewUseragent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AnalyticsPageviewUseragent) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AnalyticsPageviewUseragent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), analyticsPageviewUseragentPrimaryKeyMapping)
	sql := "DELETE FROM `analytics_pageview_useragents` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from analytics_pageview_useragents")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for analytics_pageview_useragents")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q analyticsPageviewUseragentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no analyticsPageviewUseragentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from analytics_pageview_useragents")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for analytics_pageview_useragents")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AnalyticsPageviewUseragentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AnalyticsPageviewUseragent slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(analyticsPageviewUseragentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), analyticsPageviewUseragentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `analytics_pageview_useragents` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, analyticsPageviewUseragentPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from analyticsPageviewUseragent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for analytics_pageview_useragents")
	}

	if len(analyticsPageviewUseragentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AnalyticsPageviewUseragent) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAnalyticsPageviewUseragent(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AnalyticsPageviewUseragentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AnalyticsPageviewUseragentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), analyticsPageviewUseragentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `analytics_pageview_useragents`.* FROM `analytics_pageview_useragents` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, analyticsPageviewUseragentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AnalyticsPageviewUseragentSlice")
	}

	*o = slice

	return nil
}

// AnalyticsPageviewUseragentExists checks if the AnalyticsPageviewUseragent row exists.
func AnalyticsPageviewUseragentExists(ctx context.Context, exec boil.ContextExecutor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `analytics_pageview_useragents` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if analytics_pageview_useragents exists")
	}

	return exists, nil
}
