// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// AnalyticsPageviewReferer is an object representing the database table.
type AnalyticsPageviewReferer struct {
	ID         uint64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	PageviewID uint64 `boil:"pageview_id" json:"pageview_id" toml:"pageview_id" yaml:"pageview_id"`
	Protocol   string `boil:"protocol" json:"protocol" toml:"protocol" yaml:"protocol"`
	Host       string `boil:"host" json:"host" toml:"host" yaml:"host"`
	Path       string `boil:"path" json:"path" toml:"path" yaml:"path"`
	Query      string `boil:"query" json:"query" toml:"query" yaml:"query"`

	R *analyticsPageviewRefererR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L analyticsPageviewRefererL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AnalyticsPageviewRefererColumns = struct {
	ID         string
	PageviewID string
	Protocol   string
	Host       string
	Path       string
	Query      string
}{
	ID:         "id",
	PageviewID: "pageview_id",
	Protocol:   "protocol",
	Host:       "host",
	Path:       "path",
	Query:      "query",
}

// AnalyticsPageviewRefererRels is where relationship names are stored.
var AnalyticsPageviewRefererRels = struct {
	Pageview string
}{
	Pageview: "Pageview",
}

// analyticsPageviewRefererR is where relationships are stored.
type analyticsPageviewRefererR struct {
	Pageview *AnalyticsPageview
}

// NewStruct creates a new relationship struct
func (*analyticsPageviewRefererR) NewStruct() *analyticsPageviewRefererR {
	return &analyticsPageviewRefererR{}
}

// analyticsPageviewRefererL is where Load methods for each relationship are stored.
type analyticsPageviewRefererL struct{}

var (
	analyticsPageviewRefererColumns               = []string{"id", "pageview_id", "protocol", "host", "path", "query"}
	analyticsPageviewRefererColumnsWithoutDefault = []string{"pageview_id", "protocol", "host", "path", "query"}
	analyticsPageviewRefererColumnsWithDefault    = []string{"id"}
	analyticsPageviewRefererPrimaryKeyColumns     = []string{"id"}
)

type (
	// AnalyticsPageviewRefererSlice is an alias for a slice of pointers to AnalyticsPageviewReferer.
	// This should generally be used opposed to []AnalyticsPageviewReferer.
	AnalyticsPageviewRefererSlice []*AnalyticsPageviewReferer
	// AnalyticsPageviewRefererHook is the signature for custom AnalyticsPageviewReferer hook methods
	AnalyticsPageviewRefererHook func(context.Context, boil.ContextExecutor, *AnalyticsPageviewReferer) error

	analyticsPageviewRefererQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	analyticsPageviewRefererType                 = reflect.TypeOf(&AnalyticsPageviewReferer{})
	analyticsPageviewRefererMapping              = queries.MakeStructMapping(analyticsPageviewRefererType)
	analyticsPageviewRefererPrimaryKeyMapping, _ = queries.BindMapping(analyticsPageviewRefererType, analyticsPageviewRefererMapping, analyticsPageviewRefererPrimaryKeyColumns)
	analyticsPageviewRefererInsertCacheMut       sync.RWMutex
	analyticsPageviewRefererInsertCache          = make(map[string]insertCache)
	analyticsPageviewRefererUpdateCacheMut       sync.RWMutex
	analyticsPageviewRefererUpdateCache          = make(map[string]updateCache)
	analyticsPageviewRefererUpsertCacheMut       sync.RWMutex
	analyticsPageviewRefererUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var analyticsPageviewRefererBeforeInsertHooks []AnalyticsPageviewRefererHook
var analyticsPageviewRefererBeforeUpdateHooks []AnalyticsPageviewRefererHook
var analyticsPageviewRefererBeforeDeleteHooks []AnalyticsPageviewRefererHook
var analyticsPageviewRefererBeforeUpsertHooks []AnalyticsPageviewRefererHook

var analyticsPageviewRefererAfterInsertHooks []AnalyticsPageviewRefererHook
var analyticsPageviewRefererAfterSelectHooks []AnalyticsPageviewRefererHook
var analyticsPageviewRefererAfterUpdateHooks []AnalyticsPageviewRefererHook
var analyticsPageviewRefererAfterDeleteHooks []AnalyticsPageviewRefererHook
var analyticsPageviewRefererAfterUpsertHooks []AnalyticsPageviewRefererHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AnalyticsPageviewReferer) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range analyticsPageviewRefererBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AnalyticsPageviewReferer) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range analyticsPageviewRefererBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AnalyticsPageviewReferer) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range analyticsPageviewRefererBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AnalyticsPageviewReferer) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range analyticsPageviewRefererBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AnalyticsPageviewReferer) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range analyticsPageviewRefererAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AnalyticsPageviewReferer) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range analyticsPageviewRefererAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AnalyticsPageviewReferer) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range analyticsPageviewRefererAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AnalyticsPageviewReferer) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range analyticsPageviewRefererAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AnalyticsPageviewReferer) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range analyticsPageviewRefererAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAnalyticsPageviewRefererHook registers your hook function for all future operations.
func AddAnalyticsPageviewRefererHook(hookPoint boil.HookPoint, analyticsPageviewRefererHook AnalyticsPageviewRefererHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		analyticsPageviewRefererBeforeInsertHooks = append(analyticsPageviewRefererBeforeInsertHooks, analyticsPageviewRefererHook)
	case boil.BeforeUpdateHook:
		analyticsPageviewRefererBeforeUpdateHooks = append(analyticsPageviewRefererBeforeUpdateHooks, analyticsPageviewRefererHook)
	case boil.BeforeDeleteHook:
		analyticsPageviewRefererBeforeDeleteHooks = append(analyticsPageviewRefererBeforeDeleteHooks, analyticsPageviewRefererHook)
	case boil.BeforeUpsertHook:
		analyticsPageviewRefererBeforeUpsertHooks = append(analyticsPageviewRefererBeforeUpsertHooks, analyticsPageviewRefererHook)
	case boil.AfterInsertHook:
		analyticsPageviewRefererAfterInsertHooks = append(analyticsPageviewRefererAfterInsertHooks, analyticsPageviewRefererHook)
	case boil.AfterSelectHook:
		analyticsPageviewRefererAfterSelectHooks = append(analyticsPageviewRefererAfterSelectHooks, analyticsPageviewRefererHook)
	case boil.AfterUpdateHook:
		analyticsPageviewRefererAfterUpdateHooks = append(analyticsPageviewRefererAfterUpdateHooks, analyticsPageviewRefererHook)
	case boil.AfterDeleteHook:
		analyticsPageviewRefererAfterDeleteHooks = append(analyticsPageviewRefererAfterDeleteHooks, analyticsPageviewRefererHook)
	case boil.AfterUpsertHook:
		analyticsPageviewRefererAfterUpsertHooks = append(analyticsPageviewRefererAfterUpsertHooks, analyticsPageviewRefererHook)
	}
}

// One returns a single analyticsPageviewReferer record from the query.
func (q analyticsPageviewRefererQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AnalyticsPageviewReferer, error) {
	o := &AnalyticsPageviewReferer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for analytics_pageview_referers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AnalyticsPageviewReferer records from the query.
func (q analyticsPageviewRefererQuery) All(ctx context.Context, exec boil.ContextExecutor) (AnalyticsPageviewRefererSlice, error) {
	var o []*AnalyticsPageviewReferer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AnalyticsPageviewReferer slice")
	}

	if len(analyticsPageviewRefererAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AnalyticsPageviewReferer records in the query.
func (q analyticsPageviewRefererQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count analytics_pageview_referers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q analyticsPageviewRefererQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if analytics_pageview_referers exists")
	}

	return count > 0, nil
}

// Pageview pointed to by the foreign key.
func (o *AnalyticsPageviewReferer) Pageview(mods ...qm.QueryMod) analyticsPageviewQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.PageviewID),
	}

	queryMods = append(queryMods, mods...)

	query := AnalyticsPageviews(queryMods...)
	queries.SetFrom(query.Query, "`analytics_pageviews`")

	return query
}

// LoadPageview allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (analyticsPageviewRefererL) LoadPageview(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAnalyticsPageviewReferer interface{}, mods queries.Applicator) error {
	var slice []*AnalyticsPageviewReferer
	var object *AnalyticsPageviewReferer

	if singular {
		object = maybeAnalyticsPageviewReferer.(*AnalyticsPageviewReferer)
	} else {
		slice = *maybeAnalyticsPageviewReferer.(*[]*AnalyticsPageviewReferer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &analyticsPageviewRefererR{}
		}
		args = append(args, object.PageviewID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &analyticsPageviewRefererR{}
			}

			for _, a := range args {
				if a == obj.PageviewID {
					continue Outer
				}
			}

			args = append(args, obj.PageviewID)

		}
	}

	query := NewQuery(qm.From(`analytics_pageviews`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AnalyticsPageview")
	}

	var resultSlice []*AnalyticsPageview
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AnalyticsPageview")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for analytics_pageviews")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for analytics_pageviews")
	}

	if len(analyticsPageviewRefererAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Pageview = foreign
		if foreign.R == nil {
			foreign.R = &analyticsPageviewR{}
		}
		foreign.R.PageviewAnalyticsPageviewReferers = append(foreign.R.PageviewAnalyticsPageviewReferers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PageviewID == foreign.ID {
				local.R.Pageview = foreign
				if foreign.R == nil {
					foreign.R = &analyticsPageviewR{}
				}
				foreign.R.PageviewAnalyticsPageviewReferers = append(foreign.R.PageviewAnalyticsPageviewReferers, local)
				break
			}
		}
	}

	return nil
}

// SetPageview of the analyticsPageviewReferer to the related item.
// Sets o.R.Pageview to related.
// Adds o to related.R.PageviewAnalyticsPageviewReferers.
func (o *AnalyticsPageviewReferer) SetPageview(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AnalyticsPageview) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `analytics_pageview_referers` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"pageview_id"}),
		strmangle.WhereClause("`", "`", 0, analyticsPageviewRefererPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PageviewID = related.ID
	if o.R == nil {
		o.R = &analyticsPageviewRefererR{
			Pageview: related,
		}
	} else {
		o.R.Pageview = related
	}

	if related.R == nil {
		related.R = &analyticsPageviewR{
			PageviewAnalyticsPageviewReferers: AnalyticsPageviewRefererSlice{o},
		}
	} else {
		related.R.PageviewAnalyticsPageviewReferers = append(related.R.PageviewAnalyticsPageviewReferers, o)
	}

	return nil
}

// AnalyticsPageviewReferers retrieves all the records using an executor.
func AnalyticsPageviewReferers(mods ...qm.QueryMod) analyticsPageviewRefererQuery {
	mods = append(mods, qm.From("`analytics_pageview_referers`"))
	return analyticsPageviewRefererQuery{NewQuery(mods...)}
}

// FindAnalyticsPageviewReferer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAnalyticsPageviewReferer(ctx context.Context, exec boil.ContextExecutor, iD uint64, selectCols ...string) (*AnalyticsPageviewReferer, error) {
	analyticsPageviewRefererObj := &AnalyticsPageviewReferer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `analytics_pageview_referers` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, analyticsPageviewRefererObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from analytics_pageview_referers")
	}

	return analyticsPageviewRefererObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AnalyticsPageviewReferer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no analytics_pageview_referers provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(analyticsPageviewRefererColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	analyticsPageviewRefererInsertCacheMut.RLock()
	cache, cached := analyticsPageviewRefererInsertCache[key]
	analyticsPageviewRefererInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			analyticsPageviewRefererColumns,
			analyticsPageviewRefererColumnsWithDefault,
			analyticsPageviewRefererColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(analyticsPageviewRefererType, analyticsPageviewRefererMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(analyticsPageviewRefererType, analyticsPageviewRefererMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `analytics_pageview_referers` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `analytics_pageview_referers` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `analytics_pageview_referers` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, analyticsPageviewRefererPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into analytics_pageview_referers")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == analyticsPageviewRefererMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for analytics_pageview_referers")
	}

CacheNoHooks:
	if !cached {
		analyticsPageviewRefererInsertCacheMut.Lock()
		analyticsPageviewRefererInsertCache[key] = cache
		analyticsPageviewRefererInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AnalyticsPageviewReferer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AnalyticsPageviewReferer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	analyticsPageviewRefererUpdateCacheMut.RLock()
	cache, cached := analyticsPageviewRefererUpdateCache[key]
	analyticsPageviewRefererUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			analyticsPageviewRefererColumns,
			analyticsPageviewRefererPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update analytics_pageview_referers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `analytics_pageview_referers` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, analyticsPageviewRefererPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(analyticsPageviewRefererType, analyticsPageviewRefererMapping, append(wl, analyticsPageviewRefererPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update analytics_pageview_referers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for analytics_pageview_referers")
	}

	if !cached {
		analyticsPageviewRefererUpdateCacheMut.Lock()
		analyticsPageviewRefererUpdateCache[key] = cache
		analyticsPageviewRefererUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q analyticsPageviewRefererQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for analytics_pageview_referers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for analytics_pageview_referers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AnalyticsPageviewRefererSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), analyticsPageviewRefererPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `analytics_pageview_referers` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, analyticsPageviewRefererPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in analyticsPageviewReferer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all analyticsPageviewReferer")
	}
	return rowsAff, nil
}

var mySQLAnalyticsPageviewRefererUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AnalyticsPageviewReferer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no analytics_pageview_referers provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(analyticsPageviewRefererColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLAnalyticsPageviewRefererUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	analyticsPageviewRefererUpsertCacheMut.RLock()
	cache, cached := analyticsPageviewRefererUpsertCache[key]
	analyticsPageviewRefererUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			analyticsPageviewRefererColumns,
			analyticsPageviewRefererColumnsWithDefault,
			analyticsPageviewRefererColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			analyticsPageviewRefererColumns,
			analyticsPageviewRefererPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert analytics_pageview_referers, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "analytics_pageview_referers", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `analytics_pageview_referers` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(analyticsPageviewRefererType, analyticsPageviewRefererMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(analyticsPageviewRefererType, analyticsPageviewRefererMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for analytics_pageview_referers")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == analyticsPageviewRefererMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(analyticsPageviewRefererType, analyticsPageviewRefererMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for analytics_pageview_referers")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for analytics_pageview_referers")
	}

CacheNoHooks:
	if !cached {
		analyticsPageviewRefererUpsertCacheMut.Lock()
		analyticsPageviewRefererUpsertCache[key] = cache
		analyticsPageviewRefererUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AnalyticsPageviewReferer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AnalyticsPageviewReferer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AnalyticsPageviewReferer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), analyticsPageviewRefererPrimaryKeyMapping)
	sql := "DELETE FROM `analytics_pageview_referers` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from analytics_pageview_referers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for analytics_pageview_referers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q analyticsPageviewRefererQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no analyticsPageviewRefererQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from analytics_pageview_referers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for analytics_pageview_referers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AnalyticsPageviewRefererSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AnalyticsPageviewReferer slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(analyticsPageviewRefererBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), analyticsPageviewRefererPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `analytics_pageview_referers` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, analyticsPageviewRefererPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from analyticsPageviewReferer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for analytics_pageview_referers")
	}

	if len(analyticsPageviewRefererAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AnalyticsPageviewReferer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAnalyticsPageviewReferer(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AnalyticsPageviewRefererSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AnalyticsPageviewRefererSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), analyticsPageviewRefererPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `analytics_pageview_referers`.* FROM `analytics_pageview_referers` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, analyticsPageviewRefererPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AnalyticsPageviewRefererSlice")
	}

	*o = slice

	return nil
}

// AnalyticsPageviewRefererExists checks if the AnalyticsPageviewReferer row exists.
func AnalyticsPageviewRefererExists(ctx context.Context, exec boil.ContextExecutor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `analytics_pageview_referers` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if analytics_pageview_referers exists")
	}

	return exists, nil
}
