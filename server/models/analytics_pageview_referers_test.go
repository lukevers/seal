// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAnalyticsPageviewReferers(t *testing.T) {
	t.Parallel()

	query := AnalyticsPageviewReferers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAnalyticsPageviewReferersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewReferer{}
	if err = randomize.Struct(seed, o, analyticsPageviewRefererDBTypes, true, analyticsPageviewRefererColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewReferer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AnalyticsPageviewReferers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnalyticsPageviewReferersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewReferer{}
	if err = randomize.Struct(seed, o, analyticsPageviewRefererDBTypes, true, analyticsPageviewRefererColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewReferer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AnalyticsPageviewReferers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AnalyticsPageviewReferers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnalyticsPageviewReferersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewReferer{}
	if err = randomize.Struct(seed, o, analyticsPageviewRefererDBTypes, true, analyticsPageviewRefererColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewReferer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AnalyticsPageviewRefererSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AnalyticsPageviewReferers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnalyticsPageviewReferersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewReferer{}
	if err = randomize.Struct(seed, o, analyticsPageviewRefererDBTypes, true, analyticsPageviewRefererColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewReferer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AnalyticsPageviewRefererExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AnalyticsPageviewReferer exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AnalyticsPageviewRefererExists to return true, but got false.")
	}
}

func testAnalyticsPageviewReferersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewReferer{}
	if err = randomize.Struct(seed, o, analyticsPageviewRefererDBTypes, true, analyticsPageviewRefererColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewReferer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	analyticsPageviewRefererFound, err := FindAnalyticsPageviewReferer(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if analyticsPageviewRefererFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAnalyticsPageviewReferersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewReferer{}
	if err = randomize.Struct(seed, o, analyticsPageviewRefererDBTypes, true, analyticsPageviewRefererColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewReferer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AnalyticsPageviewReferers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAnalyticsPageviewReferersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewReferer{}
	if err = randomize.Struct(seed, o, analyticsPageviewRefererDBTypes, true, analyticsPageviewRefererColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewReferer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AnalyticsPageviewReferers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAnalyticsPageviewReferersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	analyticsPageviewRefererOne := &AnalyticsPageviewReferer{}
	analyticsPageviewRefererTwo := &AnalyticsPageviewReferer{}
	if err = randomize.Struct(seed, analyticsPageviewRefererOne, analyticsPageviewRefererDBTypes, false, analyticsPageviewRefererColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewReferer struct: %s", err)
	}
	if err = randomize.Struct(seed, analyticsPageviewRefererTwo, analyticsPageviewRefererDBTypes, false, analyticsPageviewRefererColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewReferer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = analyticsPageviewRefererOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = analyticsPageviewRefererTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AnalyticsPageviewReferers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAnalyticsPageviewReferersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	analyticsPageviewRefererOne := &AnalyticsPageviewReferer{}
	analyticsPageviewRefererTwo := &AnalyticsPageviewReferer{}
	if err = randomize.Struct(seed, analyticsPageviewRefererOne, analyticsPageviewRefererDBTypes, false, analyticsPageviewRefererColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewReferer struct: %s", err)
	}
	if err = randomize.Struct(seed, analyticsPageviewRefererTwo, analyticsPageviewRefererDBTypes, false, analyticsPageviewRefererColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewReferer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = analyticsPageviewRefererOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = analyticsPageviewRefererTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnalyticsPageviewReferers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func analyticsPageviewRefererBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageviewReferer) error {
	*o = AnalyticsPageviewReferer{}
	return nil
}

func analyticsPageviewRefererAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageviewReferer) error {
	*o = AnalyticsPageviewReferer{}
	return nil
}

func analyticsPageviewRefererAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageviewReferer) error {
	*o = AnalyticsPageviewReferer{}
	return nil
}

func analyticsPageviewRefererBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageviewReferer) error {
	*o = AnalyticsPageviewReferer{}
	return nil
}

func analyticsPageviewRefererAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageviewReferer) error {
	*o = AnalyticsPageviewReferer{}
	return nil
}

func analyticsPageviewRefererBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageviewReferer) error {
	*o = AnalyticsPageviewReferer{}
	return nil
}

func analyticsPageviewRefererAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageviewReferer) error {
	*o = AnalyticsPageviewReferer{}
	return nil
}

func analyticsPageviewRefererBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageviewReferer) error {
	*o = AnalyticsPageviewReferer{}
	return nil
}

func analyticsPageviewRefererAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageviewReferer) error {
	*o = AnalyticsPageviewReferer{}
	return nil
}

func testAnalyticsPageviewReferersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AnalyticsPageviewReferer{}
	o := &AnalyticsPageviewReferer{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, analyticsPageviewRefererDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewReferer object: %s", err)
	}

	AddAnalyticsPageviewRefererHook(boil.BeforeInsertHook, analyticsPageviewRefererBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewRefererBeforeInsertHooks = []AnalyticsPageviewRefererHook{}

	AddAnalyticsPageviewRefererHook(boil.AfterInsertHook, analyticsPageviewRefererAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewRefererAfterInsertHooks = []AnalyticsPageviewRefererHook{}

	AddAnalyticsPageviewRefererHook(boil.AfterSelectHook, analyticsPageviewRefererAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewRefererAfterSelectHooks = []AnalyticsPageviewRefererHook{}

	AddAnalyticsPageviewRefererHook(boil.BeforeUpdateHook, analyticsPageviewRefererBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewRefererBeforeUpdateHooks = []AnalyticsPageviewRefererHook{}

	AddAnalyticsPageviewRefererHook(boil.AfterUpdateHook, analyticsPageviewRefererAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewRefererAfterUpdateHooks = []AnalyticsPageviewRefererHook{}

	AddAnalyticsPageviewRefererHook(boil.BeforeDeleteHook, analyticsPageviewRefererBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewRefererBeforeDeleteHooks = []AnalyticsPageviewRefererHook{}

	AddAnalyticsPageviewRefererHook(boil.AfterDeleteHook, analyticsPageviewRefererAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewRefererAfterDeleteHooks = []AnalyticsPageviewRefererHook{}

	AddAnalyticsPageviewRefererHook(boil.BeforeUpsertHook, analyticsPageviewRefererBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewRefererBeforeUpsertHooks = []AnalyticsPageviewRefererHook{}

	AddAnalyticsPageviewRefererHook(boil.AfterUpsertHook, analyticsPageviewRefererAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewRefererAfterUpsertHooks = []AnalyticsPageviewRefererHook{}
}

func testAnalyticsPageviewReferersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewReferer{}
	if err = randomize.Struct(seed, o, analyticsPageviewRefererDBTypes, true, analyticsPageviewRefererColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewReferer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnalyticsPageviewReferers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAnalyticsPageviewReferersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewReferer{}
	if err = randomize.Struct(seed, o, analyticsPageviewRefererDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewReferer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(analyticsPageviewRefererColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AnalyticsPageviewReferers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAnalyticsPageviewRefererToOneAnalyticsPageviewUsingPageview(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AnalyticsPageviewReferer
	var foreign AnalyticsPageview

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, analyticsPageviewRefererDBTypes, false, analyticsPageviewRefererColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewReferer struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, analyticsPageviewDBTypes, false, analyticsPageviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageview struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PageviewID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Pageview().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AnalyticsPageviewRefererSlice{&local}
	if err = local.L.LoadPageview(ctx, tx, false, (*[]*AnalyticsPageviewReferer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Pageview == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Pageview = nil
	if err = local.L.LoadPageview(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Pageview == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAnalyticsPageviewRefererToOneSetOpAnalyticsPageviewUsingPageview(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AnalyticsPageviewReferer
	var b, c AnalyticsPageview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, analyticsPageviewRefererDBTypes, false, strmangle.SetComplement(analyticsPageviewRefererPrimaryKeyColumns, analyticsPageviewRefererColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, analyticsPageviewDBTypes, false, strmangle.SetComplement(analyticsPageviewPrimaryKeyColumns, analyticsPageviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, analyticsPageviewDBTypes, false, strmangle.SetComplement(analyticsPageviewPrimaryKeyColumns, analyticsPageviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*AnalyticsPageview{&b, &c} {
		err = a.SetPageview(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Pageview != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PageviewAnalyticsPageviewReferers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PageviewID != x.ID {
			t.Error("foreign key was wrong value", a.PageviewID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PageviewID))
		reflect.Indirect(reflect.ValueOf(&a.PageviewID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PageviewID != x.ID {
			t.Error("foreign key was wrong value", a.PageviewID, x.ID)
		}
	}
}

func testAnalyticsPageviewReferersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewReferer{}
	if err = randomize.Struct(seed, o, analyticsPageviewRefererDBTypes, true, analyticsPageviewRefererColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewReferer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAnalyticsPageviewReferersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewReferer{}
	if err = randomize.Struct(seed, o, analyticsPageviewRefererDBTypes, true, analyticsPageviewRefererColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewReferer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AnalyticsPageviewRefererSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAnalyticsPageviewReferersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewReferer{}
	if err = randomize.Struct(seed, o, analyticsPageviewRefererDBTypes, true, analyticsPageviewRefererColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewReferer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AnalyticsPageviewReferers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	analyticsPageviewRefererDBTypes = map[string]string{`Host`: `varchar`, `ID`: `bigint`, `PageviewID`: `bigint`, `Path`: `varchar`, `Protocol`: `varchar`, `Query`: `varchar`}
	_                               = bytes.MinRead
)

func testAnalyticsPageviewReferersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(analyticsPageviewRefererPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(analyticsPageviewRefererColumns) == len(analyticsPageviewRefererPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewReferer{}
	if err = randomize.Struct(seed, o, analyticsPageviewRefererDBTypes, true, analyticsPageviewRefererColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewReferer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnalyticsPageviewReferers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, analyticsPageviewRefererDBTypes, true, analyticsPageviewRefererPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewReferer struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAnalyticsPageviewReferersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(analyticsPageviewRefererColumns) == len(analyticsPageviewRefererPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewReferer{}
	if err = randomize.Struct(seed, o, analyticsPageviewRefererDBTypes, true, analyticsPageviewRefererColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewReferer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnalyticsPageviewReferers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, analyticsPageviewRefererDBTypes, true, analyticsPageviewRefererPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewReferer struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(analyticsPageviewRefererColumns, analyticsPageviewRefererPrimaryKeyColumns) {
		fields = analyticsPageviewRefererColumns
	} else {
		fields = strmangle.SetComplement(
			analyticsPageviewRefererColumns,
			analyticsPageviewRefererPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AnalyticsPageviewRefererSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAnalyticsPageviewReferersUpsert(t *testing.T) {
	t.Parallel()

	if len(analyticsPageviewRefererColumns) == len(analyticsPageviewRefererPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLAnalyticsPageviewRefererUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AnalyticsPageviewReferer{}
	if err = randomize.Struct(seed, &o, analyticsPageviewRefererDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewReferer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AnalyticsPageviewReferer: %s", err)
	}

	count, err := AnalyticsPageviewReferers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, analyticsPageviewRefererDBTypes, false, analyticsPageviewRefererPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewReferer struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AnalyticsPageviewReferer: %s", err)
	}

	count, err = AnalyticsPageviewReferers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
