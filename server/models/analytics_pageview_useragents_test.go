// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAnalyticsPageviewUseragents(t *testing.T) {
	t.Parallel()

	query := AnalyticsPageviewUseragents()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAnalyticsPageviewUseragentsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewUseragent{}
	if err = randomize.Struct(seed, o, analyticsPageviewUseragentDBTypes, true, analyticsPageviewUseragentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewUseragent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AnalyticsPageviewUseragents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnalyticsPageviewUseragentsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewUseragent{}
	if err = randomize.Struct(seed, o, analyticsPageviewUseragentDBTypes, true, analyticsPageviewUseragentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewUseragent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AnalyticsPageviewUseragents().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AnalyticsPageviewUseragents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnalyticsPageviewUseragentsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewUseragent{}
	if err = randomize.Struct(seed, o, analyticsPageviewUseragentDBTypes, true, analyticsPageviewUseragentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewUseragent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AnalyticsPageviewUseragentSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AnalyticsPageviewUseragents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnalyticsPageviewUseragentsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewUseragent{}
	if err = randomize.Struct(seed, o, analyticsPageviewUseragentDBTypes, true, analyticsPageviewUseragentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewUseragent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AnalyticsPageviewUseragentExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AnalyticsPageviewUseragent exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AnalyticsPageviewUseragentExists to return true, but got false.")
	}
}

func testAnalyticsPageviewUseragentsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewUseragent{}
	if err = randomize.Struct(seed, o, analyticsPageviewUseragentDBTypes, true, analyticsPageviewUseragentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewUseragent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	analyticsPageviewUseragentFound, err := FindAnalyticsPageviewUseragent(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if analyticsPageviewUseragentFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAnalyticsPageviewUseragentsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewUseragent{}
	if err = randomize.Struct(seed, o, analyticsPageviewUseragentDBTypes, true, analyticsPageviewUseragentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewUseragent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AnalyticsPageviewUseragents().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAnalyticsPageviewUseragentsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewUseragent{}
	if err = randomize.Struct(seed, o, analyticsPageviewUseragentDBTypes, true, analyticsPageviewUseragentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewUseragent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AnalyticsPageviewUseragents().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAnalyticsPageviewUseragentsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	analyticsPageviewUseragentOne := &AnalyticsPageviewUseragent{}
	analyticsPageviewUseragentTwo := &AnalyticsPageviewUseragent{}
	if err = randomize.Struct(seed, analyticsPageviewUseragentOne, analyticsPageviewUseragentDBTypes, false, analyticsPageviewUseragentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewUseragent struct: %s", err)
	}
	if err = randomize.Struct(seed, analyticsPageviewUseragentTwo, analyticsPageviewUseragentDBTypes, false, analyticsPageviewUseragentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewUseragent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = analyticsPageviewUseragentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = analyticsPageviewUseragentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AnalyticsPageviewUseragents().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAnalyticsPageviewUseragentsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	analyticsPageviewUseragentOne := &AnalyticsPageviewUseragent{}
	analyticsPageviewUseragentTwo := &AnalyticsPageviewUseragent{}
	if err = randomize.Struct(seed, analyticsPageviewUseragentOne, analyticsPageviewUseragentDBTypes, false, analyticsPageviewUseragentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewUseragent struct: %s", err)
	}
	if err = randomize.Struct(seed, analyticsPageviewUseragentTwo, analyticsPageviewUseragentDBTypes, false, analyticsPageviewUseragentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewUseragent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = analyticsPageviewUseragentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = analyticsPageviewUseragentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnalyticsPageviewUseragents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func analyticsPageviewUseragentBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageviewUseragent) error {
	*o = AnalyticsPageviewUseragent{}
	return nil
}

func analyticsPageviewUseragentAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageviewUseragent) error {
	*o = AnalyticsPageviewUseragent{}
	return nil
}

func analyticsPageviewUseragentAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageviewUseragent) error {
	*o = AnalyticsPageviewUseragent{}
	return nil
}

func analyticsPageviewUseragentBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageviewUseragent) error {
	*o = AnalyticsPageviewUseragent{}
	return nil
}

func analyticsPageviewUseragentAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageviewUseragent) error {
	*o = AnalyticsPageviewUseragent{}
	return nil
}

func analyticsPageviewUseragentBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageviewUseragent) error {
	*o = AnalyticsPageviewUseragent{}
	return nil
}

func analyticsPageviewUseragentAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageviewUseragent) error {
	*o = AnalyticsPageviewUseragent{}
	return nil
}

func analyticsPageviewUseragentBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageviewUseragent) error {
	*o = AnalyticsPageviewUseragent{}
	return nil
}

func analyticsPageviewUseragentAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AnalyticsPageviewUseragent) error {
	*o = AnalyticsPageviewUseragent{}
	return nil
}

func testAnalyticsPageviewUseragentsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AnalyticsPageviewUseragent{}
	o := &AnalyticsPageviewUseragent{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, analyticsPageviewUseragentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewUseragent object: %s", err)
	}

	AddAnalyticsPageviewUseragentHook(boil.BeforeInsertHook, analyticsPageviewUseragentBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewUseragentBeforeInsertHooks = []AnalyticsPageviewUseragentHook{}

	AddAnalyticsPageviewUseragentHook(boil.AfterInsertHook, analyticsPageviewUseragentAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewUseragentAfterInsertHooks = []AnalyticsPageviewUseragentHook{}

	AddAnalyticsPageviewUseragentHook(boil.AfterSelectHook, analyticsPageviewUseragentAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewUseragentAfterSelectHooks = []AnalyticsPageviewUseragentHook{}

	AddAnalyticsPageviewUseragentHook(boil.BeforeUpdateHook, analyticsPageviewUseragentBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewUseragentBeforeUpdateHooks = []AnalyticsPageviewUseragentHook{}

	AddAnalyticsPageviewUseragentHook(boil.AfterUpdateHook, analyticsPageviewUseragentAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewUseragentAfterUpdateHooks = []AnalyticsPageviewUseragentHook{}

	AddAnalyticsPageviewUseragentHook(boil.BeforeDeleteHook, analyticsPageviewUseragentBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewUseragentBeforeDeleteHooks = []AnalyticsPageviewUseragentHook{}

	AddAnalyticsPageviewUseragentHook(boil.AfterDeleteHook, analyticsPageviewUseragentAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewUseragentAfterDeleteHooks = []AnalyticsPageviewUseragentHook{}

	AddAnalyticsPageviewUseragentHook(boil.BeforeUpsertHook, analyticsPageviewUseragentBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewUseragentBeforeUpsertHooks = []AnalyticsPageviewUseragentHook{}

	AddAnalyticsPageviewUseragentHook(boil.AfterUpsertHook, analyticsPageviewUseragentAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	analyticsPageviewUseragentAfterUpsertHooks = []AnalyticsPageviewUseragentHook{}
}

func testAnalyticsPageviewUseragentsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewUseragent{}
	if err = randomize.Struct(seed, o, analyticsPageviewUseragentDBTypes, true, analyticsPageviewUseragentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewUseragent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnalyticsPageviewUseragents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAnalyticsPageviewUseragentsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewUseragent{}
	if err = randomize.Struct(seed, o, analyticsPageviewUseragentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewUseragent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(analyticsPageviewUseragentColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AnalyticsPageviewUseragents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAnalyticsPageviewUseragentToOneAnalyticsPageviewUsingPageview(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AnalyticsPageviewUseragent
	var foreign AnalyticsPageview

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, analyticsPageviewUseragentDBTypes, false, analyticsPageviewUseragentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewUseragent struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, analyticsPageviewDBTypes, false, analyticsPageviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageview struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PageviewID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Pageview().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AnalyticsPageviewUseragentSlice{&local}
	if err = local.L.LoadPageview(ctx, tx, false, (*[]*AnalyticsPageviewUseragent)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Pageview == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Pageview = nil
	if err = local.L.LoadPageview(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Pageview == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAnalyticsPageviewUseragentToOneSetOpAnalyticsPageviewUsingPageview(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AnalyticsPageviewUseragent
	var b, c AnalyticsPageview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, analyticsPageviewUseragentDBTypes, false, strmangle.SetComplement(analyticsPageviewUseragentPrimaryKeyColumns, analyticsPageviewUseragentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, analyticsPageviewDBTypes, false, strmangle.SetComplement(analyticsPageviewPrimaryKeyColumns, analyticsPageviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, analyticsPageviewDBTypes, false, strmangle.SetComplement(analyticsPageviewPrimaryKeyColumns, analyticsPageviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*AnalyticsPageview{&b, &c} {
		err = a.SetPageview(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Pageview != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PageviewAnalyticsPageviewUseragents[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PageviewID != x.ID {
			t.Error("foreign key was wrong value", a.PageviewID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PageviewID))
		reflect.Indirect(reflect.ValueOf(&a.PageviewID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PageviewID != x.ID {
			t.Error("foreign key was wrong value", a.PageviewID, x.ID)
		}
	}
}

func testAnalyticsPageviewUseragentsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewUseragent{}
	if err = randomize.Struct(seed, o, analyticsPageviewUseragentDBTypes, true, analyticsPageviewUseragentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewUseragent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAnalyticsPageviewUseragentsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewUseragent{}
	if err = randomize.Struct(seed, o, analyticsPageviewUseragentDBTypes, true, analyticsPageviewUseragentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewUseragent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AnalyticsPageviewUseragentSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAnalyticsPageviewUseragentsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewUseragent{}
	if err = randomize.Struct(seed, o, analyticsPageviewUseragentDBTypes, true, analyticsPageviewUseragentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewUseragent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AnalyticsPageviewUseragents().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	analyticsPageviewUseragentDBTypes = map[string]string{`BrowserEngine`: `varchar`, `BrowserEngineVersion`: `varchar`, `BrowserName`: `varchar`, `BrowserVersion`: `varchar`, `ID`: `bigint`, `IsBot`: `tinyint`, `IsMobile`: `tinyint`, `Localization`: `varchar`, `OsName`: `varchar`, `OsVersion`: `varchar`, `PageviewID`: `bigint`, `Platform`: `varchar`, `Raw`: `text`}
	_                                 = bytes.MinRead
)

func testAnalyticsPageviewUseragentsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(analyticsPageviewUseragentPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(analyticsPageviewUseragentColumns) == len(analyticsPageviewUseragentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewUseragent{}
	if err = randomize.Struct(seed, o, analyticsPageviewUseragentDBTypes, true, analyticsPageviewUseragentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewUseragent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnalyticsPageviewUseragents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, analyticsPageviewUseragentDBTypes, true, analyticsPageviewUseragentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewUseragent struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAnalyticsPageviewUseragentsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(analyticsPageviewUseragentColumns) == len(analyticsPageviewUseragentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AnalyticsPageviewUseragent{}
	if err = randomize.Struct(seed, o, analyticsPageviewUseragentDBTypes, true, analyticsPageviewUseragentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewUseragent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnalyticsPageviewUseragents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, analyticsPageviewUseragentDBTypes, true, analyticsPageviewUseragentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewUseragent struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(analyticsPageviewUseragentColumns, analyticsPageviewUseragentPrimaryKeyColumns) {
		fields = analyticsPageviewUseragentColumns
	} else {
		fields = strmangle.SetComplement(
			analyticsPageviewUseragentColumns,
			analyticsPageviewUseragentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AnalyticsPageviewUseragentSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAnalyticsPageviewUseragentsUpsert(t *testing.T) {
	t.Parallel()

	if len(analyticsPageviewUseragentColumns) == len(analyticsPageviewUseragentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLAnalyticsPageviewUseragentUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AnalyticsPageviewUseragent{}
	if err = randomize.Struct(seed, &o, analyticsPageviewUseragentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewUseragent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AnalyticsPageviewUseragent: %s", err)
	}

	count, err := AnalyticsPageviewUseragents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, analyticsPageviewUseragentDBTypes, false, analyticsPageviewUseragentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AnalyticsPageviewUseragent struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AnalyticsPageviewUseragent: %s", err)
	}

	count, err = AnalyticsPageviewUseragents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
